<?php

/**
 * Implements hook_menu
 */
function getsatisfaction_integration_menu() {
	$items = array(
		'admin/config/integrated_support/getsatisfaction' => array(
			'title' => 'GetSatisfaction',
			'file' => '/getsatisfaction_integration.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('getsatisfaction_integration_admin'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_LOCAL_TASK,
		),
    'admin/config/integrated_support/getsatisfaction/tickets' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('getsatisfaction_integration_admin_tickets'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/integrated_support/getsatisfaction/tickets/delete' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'getsatisfaction_integration_admin_tickets_delete',
      //'page arguments' => array(6,7,8,9),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK
    ),
    'roadmap' => array(
      'title' => 'Roadmap',
      'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'getsatisfaction_integration_roadmap_page',
      'access arguments' => array('access content'),
    )
	);

	return $items;
}

/**
 * @function getsatisfaction_get_client
 *
 * Returns client object for querying getsatisfaction
 **/
function getsatisfaction_integration_client() {
  static $getsatisfaction_client;
  if (!empty($getsatisfaction_client)) {
    return $getsatisfaction_client;
  }

  libraries_load('tapir');
  $settings = array('cache_get_method' => '_integrated_support_cache_get', 'cache_set_method' => '_integrated_support_cache_set');
  $getsatisfaction_client = new Tapir('getsatisfaction', $settings);
  $getsatisfaction_client->useBasicAuth( variable_get('getsatisfaction_username'), variable_get('getsatisfaction_password'));

  return $getsatisfaction_client;
}

/**
 * Implements hook_integrated_support_status
 */
function getsatisfaction_integration_integrated_support_status() {
  $client = getsatisfaction_integration_client();

  $out = $client->api('topic')->call('all');
  return ($out->total) ? t('Logged into getsatisfaction') : t('Error connecting to getsatisfaction');
}

/**
 * @function getsatisfaction_create_topic
 *
 * Creates a topic on getsatisfaction as the configured user.
 */
function getsatisfaction_create_topic($subject, $detail = '', $style = '', $keywords = array()) {
  $client = getsatisfaction_integration_client();

  $topic = array_filter(array(
    'subject' => $subject,
    'additional_detail' => $detail,
    'keywords' => $keywords,
    'style' => (in_array($style, array('question', 'problem', 'praise', 'idea', 'update'))) ? $style : 'question',
  ));

  $out = $client->api('topic')->call('create', array('topic' => $topic, 'company' => variable_get('getsatisfaction_company')));
  _getsatisfaction_integration_update_topic_table($out);
  watchdog('getsatisfaction', 'created topic @out', array('@out' => serialize($out)), WATCHDOG_DEBUG);

  return $out;
}

/**
 * Implements hook_integrated_support_event
 *
 * Responds to a getsatisfaction_integration event by creating a github issue
 */
function getsatisfaction_integration_integrated_support_event($event, $payload) {
	$return = array();
	switch ($event) {

	  case 'desk_to_getsatisfaction':
	    $return[] = getsatisfaction_create_topic($payload['case_subject'], $payload['case_body']);
	    break;

    case 'github_issue':
      if (isset($payload['type']) && in_array($payload['type'], array('issue', 'comment'))) {
        //get affected getsatisfaction topics
        $gh_id = $payload['id'];
        $ids = db_select('getsatisfaction_service_map', 'gs')
          ->condition('external_id', $gh_id)
          ->condition('external_service', 'github_integration')
          ->fields('gs', array('id'))
          ->distinct()
          ->execute()
          ->fetchCol();

        //figure out a status.  (can this be configged in admin page?
        $status = 'pending'; //all linked tickets are pending by default.
        $active = array('status: in dev', 'status: needs qa', 'status: needs review');
        if (array_intersect($active, $payload['labels'])) {
          $status = 'active';
        }
        if ($payload['state'] == 'closed') {
          $status = 'complete';
        }

        watchdog('getsatisfaction', 'applying @status status to topics: @ids', array('@status' => $status, '@ids' => implode(',', $ids)));

        //apply status and update milestone
        foreach ($ids as $id) {
          $return[] = getsatisfaction_integration_update_topic_status($id, $status, @$payload['milestone']);
          if ($payload['milestone']) {
            _getsatisfaction_integration_update_topic_milestone($id, $payload['milestone']);
          }
        }


      } else {
        watchdog('No getsatisfaction action for github event: for @payload', array('@payload' => serialize($payload)), WATCHDOG_DEBUG);
      }
      break;
	}

  watchdog('getsatisfaction', '@event return: @ret', array('@event' => $event, '@ret' => serialize($return)), WATCHDOG_DEBUG);
	return $return;
}

/**
 * @function getsatisfaction_integration_update_topic_status
 *
 * Sets status on a GS topic
 */
function getsatisfaction_integration_update_topic_status($topic_id, $status, $milestone = NULL) {
  if (!in_array($status, array('null', 'pending', 'active', 'complete', 'rejected'))) {
    return FALSE; //these are the only valid statuses.
  }

  $client = getsatisfaction_integration_client();
  $update = array(
    'id' => $topic_id,
    'topic' => array(
      'status' => $status,
    ),
  );

  //send a reply when the topic is set to copmlete.
  if ($status == 'complete') {
    $stored_status = db_select('getsatisfaction_topics', 'gs')
      ->condition('id', $topic_id)
      ->fields('gs', array('status'))
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($stored_status && $stored_status != 'complete') {
      $message = 'Development of this request is complete.';
      if ($milestone) {
        $message .= '  It will be deployed as part of our ' . $milestone . ' release.';
      }
      $client->api('topic')->call('reply', array('id' => $topic_id, 'reply' => array('content' => $message)));
    }
  }

  $topic = $client->api('topic')->call('status', $update); //do you return the topic?
  _getsatisfaction_integration_update_topic_table($topic);
  return $topic;
}


/**
 * @function getsatisfaction_integration_topic(
 *
 * Fetch a GS topic by id.
 */
function getsatisfaction_integration_topic($id) {
  $cache_key = 'getsatisfaction:topic:'.$id;
  $cache = cache_get($cache_key);

  if ($cache && time() < $cache->expire) {
    return $cache->data;
  }

  $client = getsatisfaction_integration_client();
  $topic = $client->api('topic')->call('topic', array('id' => $id));
  _getsatisfaction_integration_update_topic_table($topic);

  cache_set($cache_key, $topic, 'cache', time() + 604800);
  return $topic;
}

/**
 * @function getsatisfaction_integration_topics_to_github
 *
 * Checks getsatisfaction for pending tickets that don't have an issue.  Makes a GH issue from them.
 */
function getsatisfaction_integration_topics_to_github() {
  $client = getsatisfaction_integration_client();
  $query = array('status' => 'pending', 'company' => variable_get('getsatisfaction_company'));

  $topics = $client->api('topic')->call('company_topic', $query);
  $mapped = db_select('getsatisfaction_service_map', 'gs')
    ->fields('gs', array('id'))
    ->condition('external_service', 'github_integration')
    ->execute()
    ->fetchCol();

  foreach ($topics->data as $topic) {
    _getsatisfaction_integration_update_topic_table($topic);
    //check if topic is mapped
    if (in_array($topic->id, $mapped)) {
      continue;
    }

    //send it to github
    $gh = github_create_issue(array(
      'title' => 'Feature: ' . $topic->subject,
      'body' => $topic->at_sfn . "\n>" . $topic->content,
    ));

    //create map
    if ($gh && isset($gh['number'])) {
      $state = array('values' => array(
        'external_service' => 'github_integration',
        'external_id' => $gh['number'],
        'getsatisfaction_url' => $topic->at_sfn,
      ));

      require_once(drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration.admin.inc');
      drupal_form_submit('getsatisfaction_integration_admin_tickets', $state);
    }
  }
}

/**
 * Implements hook_cron
 *
 * When var is enabled, GS topics that are pending and unmapped are sent to github and mapped to the new issue.
 */
function getsatisfaction_integration_cron() {
  if (variable_get('getsatisfaction_integration_cron', FALSE)) {
    getsatisfaction_integration_topics_to_github();
  }
}

/**
 * Define roadmap tables for views
 */
function getsatisfaction_integration_views_data() {

  $data['getsatisfaction_service_map']['table']['group'] = t('GS Service Map');
  $data['getsatisfaction_service_map']['table']['base'] = array(
    'field' => 'id', // This is the identifier field for the view.
    'title' => t('GS Service Map'),
    'help' => t('Contains map between GS and other services.'),
    'weight' => -10,
  );

  //ID table field.
  $data['getsatisfaction_service_map']['id'] = array(
    'title' => t('ID'),
    'help' => t('GS ID.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['getsatisfaction_service_map']['title'] = array(
    'title' => t('Topic Title'),
    'help' => t('GetSatisfaction topic title.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

  $data['getsatisfaction_service_map']['external_service'] = array(
    'title' => t('external service'),
    'help' => t('Name of the external service.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE, // This is use by the table display plugin.
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

    // Example numeric text field.
    $data['getsatisfaction_service_map']['external_id'] = array(
      'title' => t('External ID'),
      'help' => t('External service\'s unique ticket id.'),
      'field' => array(
        'handler' => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
    );

    $data['getsatisfaction_topics']['table']['group'] = t('GS');
    $data['getsatisfaction_topics']['table']['base'] = array(
      'field' => 'id', // This is the identifier field for the view.
      'title' => t('GS Topics.'),
      'help' => t('Local storage of get_sfn topics.'),
      'weight' => -10,
    );

    $data['getsatisfaction_topics']['table']['join'] = array(
      'getsatisfaction_service_map' => array(
        'left_field' => 'id',
        'field' => 'id',
      ),
    );

    //ID table field.
    $data['getsatisfaction_topics']['id'] = array(
      'title' => t('ID'),
      'help' => t('GS ID.'),
      'relationship' => array(
        'base' => 'getsatisfaction_service_map', // The name of the table to join with.
        'base field' => 'id', // The name of the field on the joined table.
        // 'field' => 'nid' -- see hook_views_data_alter(); not needed here.
        'handler' => 'views_handler_relationship',
        'label' => t('GS - Topicmap'),
        'title' => t('Relate to GetSatisfaction'),
        'help' => t('Relate to GetSatisfaction'),
      ),
      'field' => array(
        'handler' => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
    );

    $data['getsatisfaction_topics']['title'] = array(
      'title' => t('Topic Title'),
      'help' => t('GetSatisfaction topic title.'),
      'field' => array(
        'handler' => 'views_handler_field',
        'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

    $data['getsatisfaction_topics']['status'] = array(
      'title' => t('Status'),
      'help' => t('GetSatisfaction topic status.'),
      'field' => array(
        'handler' => 'views_handler_field',
        'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

    $data['getsatisfaction_topics']['author'] = array(
      'title' => t('author'),
      'help' => t('GetSatisfaction topic author.'),
      'field' => array(
        'handler' => 'views_handler_field',
        'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

    $data['getsatisfaction_topics']['me_too_count'] = array(
      'title' => t('How many +1s'),
      'help' => t('How many +1s.'),
      'field' => array(
        'handler' => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
    );

    $data['getsatisfaction_topics']['body'] = array(
      'title' => t('body'),
      'help' => t('GetSatisfaction topic body.'),
      'field' => array(
        'handler' => 'views_handler_field',
        'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

    $data['getsatisfaction_topics']['link'] = array(
      'title' => t('link'),
      'help' => t('GetSatisfaction topic link.'),
      'field' => array(
        'handler' => 'views_handler_field',
        'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'argument' => array(
        'handler' => 'views_handler_argument_string',
      ),
    );

    return $data;
}

/**
 * @function _getsatisfaction_integration_update_topic_milestone
 *
 * Notifies a topic about a milestone change.
 * Only do this if there is no milestone status or the status is a change
 */
function _getsatisfaction_integration_update_topic_milestone($id, $milestone) {
  if (empty($milestone)) {
    return;
  }

  $milestone = _getsatisfaction_integration_milestone_message($milestone);
  $milestones = array_map(create_function('$a', 'return _getsatisfaction_integration_milestone_message($a["title"]);'), github_integration_milestones());

  $client = getsatisfaction_integration_client();
  $replies = $client->api('topic')->call('replies', array('id' => $id, 'sort' => 'recently_created'));
  //also check owner and loop if we need to.

  foreach ($replies->data as $reply) {
    if (isset($reply->content)) {
      if ($reply->content == $milestone) {
        watchdog('getsatisfaction', 'topic @id already has milestone "@milestone"', array('@id' => $id, '@milestone' => $milestone));
        return; //last reply is this milestone so we're done.
      }

      if (in_array($reply->content, $milestones)) {
        break;
      }
    }
  }

  watchdog('getsatisfaction', 'topic @id needs milestone update: "@milestone"', array('@id' => $id, '@milestone' => $milestone));

  //either we found a stale milestone or no milestone reply exists.  post an update now.
  $client->api('topic')->call('reply', array('id' => $id, 'reply' => array('content' => $milestone)));
}

function _getsatisfaction_integration_milestone_message($milestone) {
  return 'This request has been scheduled to be part of our ' . $milestone . ' release.';
}


/**
 * @function _getsatisfaction_integration_update_topic_table
 *
 * Makes or updates a local copy of a topic
 */
function _getsatisfaction_integration_update_topic_table($topic) {
  if (!$topic) {
    return;
  }

  $record = array(
    'id' => $topic->id,
    'title' => $topic->subject,
    'status' => $topic->status,
    'author' => $topic->author->name,
    'style' => $topic->style,
    'me_too_count' => $topic->me_too_count,
    'body' => $topic->content,
    'created_at' => strtotime($topic->created_at),
    'last_active_at' => strtotime($topic->last_active_at),
    'link' => $topic->at_sfn,
  );

  $stored = db_select('getsatisfaction_topics', 'gs')
    ->condition('id', $topic->id)
    ->fields('gs')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  if (!$stored ) {
    //new record
    drupal_write_record('getsatisfaction_topics', $record);
  } elseif ($record['last_active_at'] != $stored['last_active_at']) {
    db_update('getsatisfaction_topics')
      ->fields($record)
      ->condition('id', $topic->id)
      ->execute();
  }
}


