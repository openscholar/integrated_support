<?php

/**
 * Implements hook_menu
 */
function getsatisfaction_integration_menu() {
  $items = array(
    'admin/config/integrated_support/getsatisfaction' => array(
      'title' => 'GetSatisfaction',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('getsatisfaction_integration_admin'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/integrated_support/getsatisfaction/tickets' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('getsatisfaction_integration_admin_tickets'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/integrated_support/getsatisfaction/tickets/delete' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'getsatisfaction_integration_admin_tickets_delete',
      //'page arguments' => array(6,7,8,9),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK
    ),
    'roadmap' => array(
      'title' => 'Roadmap',
      'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'getsatisfaction_integration_roadmap_page',
      'access arguments' => array('access content'),
    )
  );

  return $items;
}

/**
 * @function getsatisfaction_get_client
 *
 * Returns client object for querying getsatisfaction
 **/
function getsatisfaction_integration_client() {
  static $getsatisfaction_client;
  if (!empty($getsatisfaction_client)) {
    return $getsatisfaction_client;
  }

  libraries_load('tapir');
  $settings = array('cache_get_method' => '_integrated_support_cache_get', 'cache_set_method' => '_integrated_support_cache_set');
  $getsatisfaction_client = new Tapir('getsatisfaction', $settings);
  $getsatisfaction_client->useBasicAuth( variable_get('getsatisfaction_username'), variable_get('getsatisfaction_password'));

  return $getsatisfaction_client;
}

/**
 * Implements hook_integrated_support_status
 */
function getsatisfaction_integration_integrated_support_status() {
  $client = getsatisfaction_integration_client();
  $out = $client->api('topic')->call('all');
  return ($out->total) ? t('Logged into getsatisfaction') : t('Error connecting to getsatisfaction');
}

/**
 * @function getsatisfaction_integration_create_topic
 *
 * Creates a topic on getsatisfaction as the configured user.
 */
function getsatisfaction_integration_create_topic($subject, $detail = '', $style = '', $keywords = array()) {
  $client = getsatisfaction_integration_client();

  $topic = array_filter(array(
    'subject' => $subject,
    'additional_detail' => $detail,
    'keywords' => $keywords,
    'style' => (in_array($style, array('question', 'problem', 'praise', 'idea', 'update'))) ? $style : 'question',
  ));

  try {
    $out = $client->api('topic')->call('create', array('topic' => $topic, 'company' => variable_get('getsatisfaction_company')));
  } catch (Exception $e) {
    watchdog('getsatisfaction', '@code error creating topic: @topic', array('@code' => $e->getCode(), '@topic' => serialize($topic)));
    return FALSE;
  }
  _getsatisfaction_integration_update_topic_table($out);
  watchdog('getsatisfaction', 'created topic @out', array('@out' => serialize($out)), WATCHDOG_DEBUG);

  return $out;
}

/**
 * Implements hook_integrated_support_event
 *
 * Responds to a getsatisfaction_integration event by updating a GS topic that is mapped to a GH issue
 */
function getsatisfaction_integration_integrated_support_event($event, $payload) {
  $return = array();
  switch ($event) {

  case 'desk_to_getsatisfaction':
    $return[] = getsatisfaction_integration_create_topic($payload['case_subject'], $payload['case_body']);
    break;

  case 'github_issue':
    if (isset($payload['type']) && in_array($payload['type'], array('issue', 'comment'))) {
      //get affected getsatisfaction topics
      $gh_id = $payload['id'];
      $ids = db_select('getsatisfaction_service_map', 'gs')
        ->condition('external_id', $gh_id)
        ->condition('external_service', 'github_integration')
        ->fields('gs', array('id'))
        ->distinct()
        ->execute()
        ->fetchCol();

      
      //When GH and GS tickets are mapped, set teh status.
      if ($payload['state'] == 'closed') {
        $status = 'complete';
      } else {
        $status = ($payload['milestone']) ? 'active' : NULL;
      }
      
      watchdog('getsatisfaction', 'applying @status status to topics: @ids', array('@status' => $status, '@ids' => implode(',', $ids)));

      //apply status and update milestone
      foreach ($ids as $id) {
        $return[] = getsatisfaction_integration_update_topic_status($id, $status, @$payload['milestone'], @$payload['labels']);
        if ($payload['milestone']) {
          _getsatisfaction_integration_update_topic_milestone($id, $payload['milestone'], $payload['id']);
        }
      }


    } else {
      watchdog('No getsatisfaction action for github event: for @payload', array('@payload' => serialize($payload)), WATCHDOG_DEBUG);
    }
    break;
  }

  watchdog('getsatisfaction', '@event return: @ret', array('@event' => $event, '@ret' => serialize($return)), WATCHDOG_DEBUG);
  return $return;
}

/**
 * @function getsatisfaction_integration_update_topic_status
 *
 * Sets status on a GS topic
 */
function getsatisfaction_integration_update_topic_status($topic_id, $status, $milestone = NULL, $labels = array()) {
  if (!in_array($status, array('null', 'pending', 'active', 'complete', 'rejected'))) {
    return FALSE; //these are the only valid statuses.
  }

  $client = getsatisfaction_integration_client();
  $update = array(
    'id' => $topic_id,
    'topic' => array(
      'status' => $status,
    ),
  );

  //send a reply when the topic is set to copmlete.
  if ($status == 'complete') {
    $stored_status = db_select('getsatisfaction_topics', 'gs')
      ->condition('id', $topic_id)
      ->fields('gs', array('status'))
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($stored_status && $stored_status != 'complete') {
      $message = 'Development of this request is complete.';

      if (in_array('Hotfix', $labels)) {
        $message .= ' It will be released promptly.';
      }
      elseif ($milestone) {
        $message .= '  It will be deployed as part of our ' . $milestone . ' release.';
      }

      $client->api('topic')->call('reply', array('id' => $topic_id, 'reply' => array('content' => $message)));
    }
  }

  $topic = $client->api('topic')->call('status', $update); //do you return the topic?
  _getsatisfaction_integration_update_topic_table($topic);
  return $topic;
}


/**
 * @function getsatisfaction_integration_topic(
 *
 * Fetch a GS topic by id.
 */
function getsatisfaction_integration_topic($id) {
  $cache_key = 'getsatisfaction:topic:'.$id;
  $cache = cache_get($cache_key);

  if ($cache && time() < $cache->expire) {
    return $cache->data;
  }

  $client = getsatisfaction_integration_client();
  $topic = $client->api('topic')->call('topic', array('id' => $id));
  _getsatisfaction_integration_update_topic_table($topic);

  cache_set($cache_key, $topic, 'cache', time() + 604800);
  return $topic;
}

/**
 * @function getsatisfaction_integration_search()
 * 
 * Fetches all GS topics matching search params
 */
function getsatisfaction_integration_search($params = array()) {
  $client = getsatisfaction_integration_client();
  $query = array_merge($params, array('company' => variable_get('getsatisfaction_company')));
  $query['page'] = 1;
  $return = array();
  
  while ($query['page']) {
    $results = $client->api('topic')->call('company_topic', $query);
    $return = array_merge($return, $results->data);
    $query['page'] = ($results->total > count($return)) ? $query['page'] + 1 : FALSE;
  }
  
  return $return;
}

/**
 * @function _getsatisfaction_integration_newest_issues
 *
 * Fetches GS topics newer than $id.  This is pretty much a copy of _search above, but with some logic
 * to bail out if we've passed the id we're looking for.
 */
function _getsatisfaction_integration_newer_issues($id, $params = array()) {
  $gs = getsatisfaction_integration_client();
  $return = array();
  $params = array_merge($params, array(
    'page' => 1,
    'limit' => 30,
    'sort' => 'recently_created',
    'company' => variable_get('getsatisfaction_company'),
  ));
  
  try {
    while ($params['page']) {
      $result = $gs->api('topic')->call('company_topic', $params);
      $result = array_filter($result->data, function($i) use ($id) {return ($id < $i->id);});
      $return = array_merge($return, $result);
      
      error_log(t("@r results out of @l limit\n", array('@r' => count($result), '@l' => $params['limit'])));
      $params['page'] = (count($result) < $params['limit']) ? FALSE : $params['page'] + 1;
    }
  } catch (Exception $e) {
    watchdog('getsatisfaction', 'Error searching getsatisfaction: @error.  Message: @msg', array('@error' => $e->getCode(), '@msg' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
  
  $return = array_reduce($return, function($ret, $i) {$ret[$i->id] = $i; return $ret;}); //use id as array key
  return $return;
}

/**
 * @function getsatisfaction_integration_topics_to_github
 *
 * Checks getsatisfaction for pending tickets that don't have an issue.  Makes a GH issue from them.
 */
function getsatisfaction_integration_topics_to_github() {
  $client = getsatisfaction_integration_client();
  $query = array('status' => 'active', 'company' => variable_get('getsatisfaction_company'));

  $topics = $client->api('topic')->call('company_topic', $query);
  $mapped = db_select('getsatisfaction_service_map', 'gs')
    ->fields('gs', array('id'))
    ->condition('external_service', 'github_integration')
    ->execute()
    ->fetchCol();

  //more logging.  *sigh*
  $ids = array_map(create_function('$obj', 'return $obj->id;'), $topics->data);
  $todo = array_diff($ids, $mapped);
  watchdog('getsatisfaction', 'active topics: [@topics].  already mapped: [@mapped].  todo: [@todo]', array(
    '@topics' => implode(', ', $ids), '@mapped' => implode(', ', $mapped), '@todo' => implode(', ', $todo)
  ));

  foreach ($topics->data as $topic) {
    _getsatisfaction_integration_update_topic_table($topic);
    //check if topic is mapped
    if (in_array($topic->id, $mapped)) {
      continue;
    }

    //send it to github
    $gh = github_create_issue(array(
      'title' => $topic->subject,
      'body' => $topic->content,
    ));

    //create map
    if ($gh && isset($gh['number'])) {
      $state = array('values' => array(
        'external_service' => 'github_integration',
        'external_id' => $gh['number'],
        'getsatisfaction_url' => $topic->at_sfn,
      ));

      require_once(drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration.admin.inc');
      drupal_form_submit('getsatisfaction_integration_admin_tickets', $state);
    }
  }
}

/**
 * Implements hook_cron
 *
 * When var is enabled, GS topics that are pending and unmapped are sent to github and mapped to the new issue.
 */
function getsatisfaction_integration_cron() {
  if (variable_get('getsatisfaction_integration_cron', FALSE)) {
    getsatisfaction_integration_topics_to_github();
  }
}

/**
 * @function _getsatisfaction_integration_update_topic_milestone
 *
 * Notifies a topic about a milestone change.
 * Only do this if there is no milestone status or the status is a change
 */
function _getsatisfaction_integration_update_topic_milestone($id, $milestone, $gh_id, $notify = TRUE) {
  //get the titles, current state for roadmap notifications.
  $result = db_select('getsatisfaction_service_map', 'gs')
    ->condition('id', $id)
    ->condition('external_service', 'github_integration')
    ->condition('external_id', $gh_id)
    ->fields('gs')
    ->execute();
  $row = $result->fetchObject();
  
  if (empty($milestone) || $row->milestone == $milestone) {
    return;
  }
  
  $client = getsatisfaction_integration_client();
  $issue = github_integration_issue($gh_id);
  $milestone_titles = array_map(create_function('$a', 'return $a["title"];'), github_integration_milestones());
  
  //update our record
  $update = db_update('getsatisfaction_service_map')
    ->fields(array('milestone' => $milestone));
  foreach ($row as $key => $value) {
    $update->condition($key, $value);
  }
  $updated = $update->execute();

  if (!$notify) {
    return;
  }
  
  //update getsatisfaction
  watchdog('getsatisfaction', 'topic @id needs milestone update: "@milestone"', array('@id' => $id, '@milestone' => $milestone));
  _getsatisfaction_integration_roadmap_notification('update', $row->title, $row->external_title, $milestone);
  $reply = ($issue['state'] == 'closed' ) ? 'This request has been fixed.  The update is scheduled to be part of our ' . $milestone . ' release.' : 'This request has been scheduled to be part of our ' . $milestone . ' release.'; 
  $updated = $client->api('topic')->call('reply', array('id' => $id, 'reply' => array('content' => $reply)));

  //now lets check tags, removing existing milestones and adding ours.
  $topic = $client->api('topic')->call('topic', array('id' => $id));
  $keywords = (isset($topic->keywords)) ? explode(',', $topic->keywords) : array();
  if (!in_array($milestone, $keywords)) {
    $keywords = array_diff($keywords, $milestone_titles);
    $keywords[] = $milestone;
    $client->api('topic')->call('update', array('id' => $id, 'topic' => array('keywords' => implode(',', $keywords))));
  }
  
  return $updated;
}

/**
 * @function _getsatisfaction_integration_roadmap_notification
 * 
 * Notifies users of changes to our roadmap
 * 
 * @param string $type
 *   add, delete, or update
 *   
 * @param string $gs_topic
 *   Title of getsatisfaction topic
 *   
 * @param string $gh_issue
 *   Title of github issue
 *   
 * @param string $milestone
 *   milestone name.  Only used in update.
 */
function _getsatisfaction_integration_roadmap_notification($type, $gs_topic, $gh_issue, $milestone = NULL) {
  $recipients = variable_get('getsatisfaction_integration_roadmap_notification_recipients', '');
  $recipients = explode(',', $recipients);
  $recipients = array_map('trim', $recipients);
  
  switch ($type) {
    case 'add':
      $body = t('"@topic" has been mapped to "@issue"', array('@topic' => $gs_topic, '@issue' => $gh_issue));
      $subject = t('[OS Roadmap] "@topic" has been added.', array('@topic' => $gs_topic));
      break;
      
    case 'delete':
      $body = t('"@topic" has been removed from the roadmap.  It was previously mapped to "@issue"', array('@topic' => $gs_topic, '@issue' => $gh_issue));
      $subject = t('[OS Roadmap] "@topic" has been removed.', array('@topic' => $gs_topic));     
      break;
      
    case 'update':
      $body = t('"@topic" has had its milestone changed to "@ms".', array('@topic' => $gs_topic, '@ms' => $milestone));
      $subject = t('[OS Roadmap] "@topic" has changed milestone.', array('@topic' => $gs_topic));
      break;
      
    default:
      return;
  }
  
  $headers = array('From: ' . variable_get('site_mail'));
  
  foreach ($recipients as $to) {
    mail($to, $subject, $body, implode("\r\n", $headers));
  } 
}

/**
 * @function _getsatisfaction_integration_update_topic_table
 *
 * Makes or updates a local copy of a topic
 */
function _getsatisfaction_integration_update_topic_table($topic) {
  if (!$topic) {
    return;
  }

  $record = array(
    'id' => $topic->id,
    'title' => $topic->subject,
    'status' => $topic->status,
    'author' => $topic->author->name,
    'style' => $topic->style,
    'me_too_count' => $topic->me_too_count,
    'body' => $topic->content,
    'created_at' => strtotime($topic->created_at),
    'last_active_at' => strtotime($topic->last_active_at),
    'link' => $topic->at_sfn,
  );

  $stored = db_select('getsatisfaction_topics', 'gs')
    ->condition('id', $topic->id)
    ->fields('gs')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  if (!$stored ) {
    //new record
    drupal_write_record('getsatisfaction_topics', $record);
  } elseif ($record['last_active_at'] != $stored['last_active_at']) {
    db_update('getsatisfaction_topics')
      ->fields($record)
      ->condition('id', $topic->id)
      ->execute();
  }
}


