<?php 

/**
 * Implements hook_menu
 */
function getsatisfaction_integration_menu() {
	$items = array(
		'admin/config/integrated_support/getsatisfaction' => array(
			'title' => 'GetSatisfaction',
			'file' => '/getsatisfaction_integration.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('getsatisfaction_integration_admin'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_LOCAL_TASK,
		),
    'admin/config/integrated_support/getsatisfaction/tickets' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('getsatisfaction_integration_admin_tickets'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/integrated_support/getsatisfaction/tickets/delete' => array(
      'title' => 'GetSatisfaction Ticket Mappings',
      'file' => '/getsatisfaction_integration.admin.inc',
      'page callback' => 'getsatisfaction_integration_admin_tickets_delete',
      //'page arguments' => array(6,7,8,9),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK
    ),
    'roadmap' => array(
      'title' => 'roadmap',
      'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'getsatisfaction_integration_roadmap_page',
      'access arguments' => array('access content'),
    )
	);
	
	return $items;
}

/**
 * @function getsatisfaction_get_client
 *
 * Returns client object for querying getsatisfaction
 **/
function getsatisfaction_integration_client() {
  static $getsatisfaction_client;
  if (!empty($getsatisfaction_client)) {
    return $getsatisfaction_client;
  }

  libraries_load('tapir');
  $settings = array('cache_get_method' => '_integrated_support_cache_get', 'cache_set_method' => '_integrated_support_cache_set');
  $getsatisfaction_client = new Tapir('getsatisfaction', $settings);
  $getsatisfaction_client->useBasicAuth( variable_get('getsatisfaction_username'), variable_get('getsatisfaction_password'));
  
  return $getsatisfaction_client;
}

/**
 * Implements hook_integrated_support_status
 */
function getsatisfaction_integration_integrated_support_status() {
  $client = getsatisfaction_integration_client();
  $topic = array(
    'subject' => 'does my api topic work?'
  );

  $out = $client->api('topic')->call('all');

//  $reply = $client->api('topic')->call('reply', array('id' => '5419883','reply' => array('content' => 'can haz reply?')));
//  dpm($reply);
  return ($out->total) ? t('Logged into getsatisfaction') : t('Error connecting to getsatisfaction');
}

/**
 * @function getsatisfaction_create_topic
 * 
 * Creates a topic on getsatisfaction as the configured user.
 */
function getsatisfaction_create_topic($subject, $detail = '', $style = '', $keywords = array()) {
  $client = getsatisfaction_integration_client();
  
  $topic = array_filter(array(
    'subject' => $subject,
    'additional_detail' => $detail,
    'keywords' => $keywords,
    'style' => (in_array($style, array('question', 'problem', 'praise', 'idea', 'update'))) ? $style : 'question',    
  ));
  
  $out = $client->api('topic')->call('create', array('topic' => $topic, 'company' => variable_get('getsatisfaction_company')));
  watchdog('getsatisfaction', 'created topic @out', array('@out' => serialize($out)), WATCHDOG_DEBUG);
  
  return $out;
}	
	
/**
 * Implements hook_integrated_support_event
 * 
 * Responds to a getsatisfaction_integration event by creating a github issue
 */
function getsatisfaction_integration_integrated_support_event($event, $payload) {
	$return = array();
	switch ($event) {

	  case 'desk_to_getsatisfaction':
	    $return[] = getsatisfaction_create_topic($payload['case_subject'], $payload['case_body']);
	    break;

    case 'github_issue':
      if (isset($payload['type']) && in_array($payload['type'], array('issue', 'comment'))) {
        //get affected getsatisfaction topics
        $gh_id = $payload['id'];
        $ids = db_select('getsatisfaction_service_map', 'gs')
          ->condition('external_id', $gh_id)
          ->condition('external_service', 'github_integration')
          ->fields('gs', array('id'))
          ->distinct()
          ->execute()
          ->fetchCol();
  
        //figure out a status.  (can this be configged in admin page?
        $status = 'pending'; //all linked tickets are pending by default.
        $active = array('status: in dev', 'status: needs qa', 'status: needs review');
        if (array_intersect($active, $payload['labels'])) {
          $status = 'active';
        }
        if ($payload['state'] == 'closed') {
          $status = 'complete';
        }
  
        watchdog('getsatisfaction', 'applying @status status to topics: @ids', array('@status' => $status, '@ids' => implode(',', $ids)));
  
        //apply status
        $client = getsatisfaction_integration_client();
        foreach ($ids as $id) {
          $return[] = getsatisfaction_integration_update_topic_status($id, $status);
         //$return[] = $client->api('topic')->call('reply', array('id' => '5419883','reply' => array('content' => 'Current status: ' . $status)));
        }
      } else {
        watchdog('No getsatisfaction action for github event: for @payload', array('@payload' => serialize($payload)), WATCHDOG_DEBUG);
      }
      break;
//    default:
//        watchdog('No getsatisfaction events for "'.$event.'".', array(), WATCHDOG_DEBUG);
	}

  watchdog('getsatisfaction', '@event return: @ret', array('@event' => $event, '@ret' => serialize($return)), WATCHDOG_DEBUG);
	return $return;
}

/**
 * @function getsatisfaction_integration_update_topic_status
 *
 * Sets status on a GS topic
 */
function getsatisfaction_integration_update_topic_status($topic_id, $status) {
  if (!in_array($status, array('null', 'pending', 'active', 'complete', 'rejected'))) {
    return FALSE;
  }

  $client = getsatisfaction_integration_client();
  $update = array(
    'id' => $topic_id,
    'topic' => array(
      //'keywords' => 'api-test,broken',
      'status' => $status,
//      'user_defined_code' => 'can haz udc?', //NO!  makes server errors
      //'id' => $topic_id,
      //'subject' => 'asdfasdf',
    ),
    //'company' => variable_get('getsatisfaction_company'),
    //'id' => $topic_id,
  );
  $response = $client->api('topic')->call('update', $update);
  //dpm($response);
  return $response;
}


/**
 * @function getsatisfaction_integration_topic(
 *
 * Fetch a GS topic by id.
 */
function getsatisfaction_integration_topic($id) {
  $cache_key = 'getsatisfaction:topic:'.$id;
  $cache = cache_get($cache_key);

  if ($cache && time() < $cache->expire) {
    return $cache->data;
  }

  $client = getsatisfaction_integration_client();
  $topic = $client->api('topic')->call('topic', array('id' => $id));

  cache_set($cache_key, $topic, 'cache', time() + 604800);
  return $topic;
}

/**
 * @function getsatisfaction_integration_topics_to_github
 *
 * Checks getsatisfaction for pending tickets that don't have an issue.  Makes a GH issue from them.
 */
function getsatisfaction_integration_topics_to_github() {
  $client = getsatisfaction_integration_client();
  $topics = $client->api('topic')->call('company_topic', array('status' => 'pending', 'company' => variable_get('getsatisfaction_company')));
  $mapped = db_select('getsatisfaction_service_map', 'gs')
    ->fields('gs', array('id'))
    ->condition('external_service', 'github_integration')
    ->execute()
    ->fetchCol();

  foreach ($topics->data as $topic) {
    //check if topic is mapped
    if (in_array($topic->at_sfn, $mapped) || in_array($topic->url, $mapped)) {
      continue;
    }

    //send it to github
    $gh = github_create_issue(array(
      'title' => 'Feature: ' . $topic->subject,
      'body' => $topic->at_sfn . "\n>" . $topic->content,
    ));

    //create map
    if ($gh && isset($gh['number'])) {
      $state = array('values' => array(
        'external_service' => 'github_integration',
        'external_id' => $gh['number'],
        'getsatisfaction_url' => $topic->at_sfn,
      ));

      require_once(drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration.admin.inc');
      drupal_form_submit('getsatisfaction_integration_admin_tickets', $state);
    }
  }
}

/**
 * Implements hook_cron
 *
 * When var is enabled, GS topics that are pending and unmapped are sent to github and mapped to the new issue.
 */
function getsatisfaction_integration_cron() {
  if (variable_get('getsatisfaction_integration_cron', FALSE)) {
    getsatisfaction_integration_topics_to_github();
  }
}
