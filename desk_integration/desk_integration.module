<?php 

define('DESK_INTEGRATION_CASE_LOCKED', 'Case currently locked by another user');

function desk_integration_menu() {
	$items = array(
		'admin/config/integrated_support/desk' => array(
			'title' => 'Desk',
			'file' => '/desk_integration.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('desk_integration_admin'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_LOCAL_TASK,
		),
	  'desk' => array(
	    'title' => 'Desk Mass Message',
	    'file' => '/desk_integration.pages.inc',
	    'page callback' => 'drupal_get_form',  
      'page arguments' => array('desk_integration_mass_message_form'),
      'access arguments' => array('administer site configuration'),
    ),
    'desk/service_rating/%/%/%' => array(
      'title' => 'Rate our service',
      'file' => '/desk_integration.pages.inc',
	    'page callback' => 'drupal_get_form',
      'page arguments' => array('desk_integration_service_rating', 2, 3, 4),
      'access arguments' => array('access content'),
    ),
	    
    'desk/bug_report/%/%/%' => array(
      'title' => 'Bug Report',
      'file' => '/desk_integration.pages.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('desk_integration_bug_report', 2, 3, 4),
      'access arguments' => array('access content'),
    )
	);
	
	return $items;
}


/*
 * Implements hook_integrated_support_info
 *
 * Defines desk_to_github
 */
function desk_integration_integrated_support_info() {
  return array(
    'desk_to_github' => array(
      'name' => t('Desk to Github'),
      'description' => t('Lets desk send tickets to github.'),
      'process function' => 'desk_integration_desk_to_github_process',
      'complete function' => 'desk_integration_desk_to_github_complete',
      'setup function' => 'desk_integration_desk_to_github_setup',
    ),
    'desk_to_getsatisfaction' => array(
      'name' => t('Desk to GetSatisfaction'),
      'description' => t('Lets desk move tickets to GetSatisfaction.'),
      'process function' => 'desk_integration_desk_to_getsatisfaction_process',
      'complete function' => 'desk_integration_desk_to_getsatisfaction_complete',
      'setup function' => 'desk_integration_desk_to_getsatisfaction_setup',
    ),
    'desk_to_bugreport' => array(
      'name' => t('Desk to Bug Report'),
      'description' => t('Moves ticket to GetSatisfaction and Github and synchronizes them.'),
      'process function' => 'desk_integration_desk_to_bugreport_process',
      'complete function' => 'desk_integration_desk_to_bugreport_complete',
      'setup function' => 'desk_integration_desk_to_bugreport_setup',
    ),
  );
}

/**
 * Implements hook_libraries_info
 * 
 * Provides Desk api via tapir
 */
function desk_integration_libraries_info() {
	return array(
		'tapir' => array(
			'name' => 'Tapir',
			'version' => 'master',
      'files' => array('php' => array('tapir.php')),
      'dependencies' => array('pear'),
    ),
    //PEAR HTTP/Request2
    'pear' => array(
      'name' => 'PEAR',
      'version' => '2.1.1',
      'files' => array('php' => array('HTTP/Request2.php')),
      'callbacks' => array('pre-load' => array('_desk_integration_pear_path')),
    )
  );
}

/**
 * @function _desk_integration_pear_path
 *
 * PEAR includes reference each other, expecting them to be in PHP's path.  Adds their location
 * whenever we load PEAR so they can do that.
 */
function _desk_integration_pear_path() {
  set_include_path(libraries_get_path('pear'));
}

/**
 * Implements hook_integrated_support_event
 * 
 * Responds to a desk_integration event by creating a github issue
 */
function desk_integration_integrated_support_event($event, $payload) {
	$return = array();
	switch ($event) {
		case 'github_issue':
		  if ($payload['event'] != 'issue') {
		    //watchdog('desk', 'Ignoring github issue.  Event is not set to "issue".');
		    return;		    //we only care about issues, so ignore code pushes.
		  }
		  
		  //find affected desk cases
			$desk = desk_integration_client();
			$ids = array();
			$cases = $desk->api('case')->call('search', array(
		    'case_custom_github_issue_id' => $payload['id'],
			  'status' => 'open,pending,resolved',
	    ));
			watchdog('desk', 'Attempting to update cases: @cases.', array('@cases' => serialize($cases)));
			
			//get their ids
			if (isset($cases->total_entries) && $cases->total_entries) {
				foreach ($cases->_embedded->entries as $case) {
					if (($payload['milestone'] != $case->custom_fields->github_milestone) || ($payload['state'] != $case->custom_fields->github_status)) {
						$ids[] = end(explode('/', $case->_links->self->href));
					}
				}
			}
			
			//and update them
			$updated = desk_integration_update_cases($ids, $payload['id'], $payload['milestone'], $payload['state'], $payload['labels']);
			$return = array(
		    'message' => t('Updated @count cases: @ids', array('@count' => count($ids), '@ids' => implode(', ', $ids))), 
		    'responses' => serialize($updated)
	    );			
			
			//make sure github issue is labeled as being related to desk cases
			if ($ids && !in_array('desk', $payload)) {
			  $gh = github_integration_client();
			  $issue = $gh->api('issue')->labels()->add(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $payload['id'], 'desk');
			}
			break;
	}
	return $return;
}

/**
 * @function desk_integration_status
 * 
 * Defines hook_integrated_support status
 * Checks each of the service integration modules to see if they can connect
 */
function desk_integration_integrated_support_status() {
  $desk = desk_integration_client();
  try {
    $search = $desk->api('case')->call('search', array('case_id' => 161));
  } catch (Exception $e) {
    drupal_set_message('Desk: ' . $e->getMessage(), 'error');
  }
  
  if (!isset($search->total_entries)) {
    return t('Error logging in to desk.');
  }
  
  $custom_fields = (array) $search->_embedded->entries[0]->custom_fields;
  $check = array('github_issue_id', 'github_milestone', 'github_status');
  $missing = array_diff($check, array_keys($custom_fields));
  if ($missing) {
    return t('Logged into Desk.com, but the following custom fields were missing: @missing', array('@missing' => implode(', ', $missing)));
  }
  
  return t('Logged into Desk.com');
}

/**
 * @function desk_integration_desk_to_github_process
 * 
 * Prepares a case from desk to be created as an issue in github
 */
function desk_integration_desk_to_github_process($body) {
  $data =_desk_integration_payload_data();

  //Don't create a ticket from a case with no id.  There's no way to update the original case with the gh_id.
  if (empty($data['case_id'])) {
    return 'Case has no id.  Send after its saved so GH can reference it.';
  }
  
  //don't create tickets from cases that are already assigned to an id
  if ($data['case_custom_github_issue_id']) {
    return 'Case already has a github id.';
  }
  
  //build a generic ticket from the desk payload
  $data += array(
    'text' => $data['case_body'],
    'assignee' => NULL, //(isset($conf['user_map'][$data['case_user_name']])) ? $conf['user_map'][$data['case_user_name']] : NULL,
    'labels' => 'Desk',
  );
  
  return $data;
}



/**
 * @function desk_integration_desk_to_github_setup
 * 
 * Enables desk's desk_to_github integration url
 */
function desk_integration_desk_to_github_setup() {
  $name = 'Create GitHub Issue';
  global $base_url;
	 
  //create a service
  $url = $base_url . '/integrated_support/desk_to_github?';
  $url .= 'redirect_to_github=1&';
  $config = array(
    'name' => $name,
    'description' => t('Send tickets to github'),
    'enabled' => TRUE,
    'markup' => $url,  //template can be straight up vars now.  no need for json
  );
  
  desk_integration_setup_integration_url($name, $config);
}

/**
 * @function desk_integration_setup_integration_url()
 * 
 * Wrapper for the generic parts of of integration url setup functions
 */
function desk_integration_setup_integration_url($name, $config) {
	//liquid template vars
  require_once(drupal_get_path('module', 'desk_integration') . '/desk_liquid.inc');
  $desk = desk_integration_client();
  $vars = desk_liquid_template();
  $config['markup'] .= desk_liquid_url_template();
  
  //prune old services.
  $results = $desk->api('integration_urls')->call('list');
  if ($results->total_entries) {
    foreach ($results->_embedded->entries as $entry) {
      if ($entry->name == $name) {
        $href = $entry->_links->self->href;
        list(,,,,$id) = explode('/', $href);
        $desk->api('integration_urls')->call('delete', array('id' => $id));
      }
    }
  }
  
  $results = $desk->api('integration_urls')->call('create', $config);
  if ($results) {
    drupal_set_message('Enabled ' . $name . ' on Desk.com.  Don\'t forget to set it to use a new window.');
  } else {
    drupal_set_message('Could not enable ' . $name . '.', 'error');
    watchdog('desk_integration', t('Error enabling desk integration url for @name.  Config of @config yielded: @results'),
      array('@name' => '$name', '@config' => serialize($config), '@results' => serialize($results)));
  }
}

/**
 * @function desk_integration_desk_to_github_complete
 * 
 * Desk case has gone to github.  Update the original case with the new issue's id
 */
function desk_integration_desk_to_github_complete($payload, $responses = array()) {
  $github = $responses['github_integration'];
  if (!$github) {
    return;
  }

  $updated = desk_integration_update_cases($payload['case_id'], $github['number'], $github['milestone'], $github['state'], $github['labels']);
  if (!$updated) {
  	watchdog('desk', 'Could not send from desk to github.  Request: ' . serialize($_REQUEST) . ' github response: ' . serialize($github) . ' desk update: ' . serialize($updated));
  }
  
  watchdog('desk', 'Desk ticket "@case" -> github "@issue" complete.  @updated', array('@case' => $payload['case_id'], '@issue' => $github['number'], '@updated' => serialize($updated)));
  
  //redirect if the hook says so
  if ($_REQUEST['redirect_to_github']) {
    drupal_goto($github['html_url']);
  }
}
/**
 * @function desk_get_client
 * 
 * Returns client object for querying desk
 **/
function desk_integration_client() {
  static $desk_client;
  if (!empty($desk_client)) {
    return $desk_client;
  }

  libraries_load('tapir');
  $desk = new Tapir('desk');
  $desk->setParameters(array('subdomain' => variable_get('desk_subdomain')));
  $desk->useOAuth(
    variable_get('desk_consumer_key'), 
    variable_get('desk_consumer_secret'), 
    variable_get('desk_auth_token'), 
    variable_get('desk_auth_secret')
  );

  return $desk;
}

/*
 * @function desk_integration_desk_to_bugreport_process
 * 
 * Catches bug report request.  Gets case id, customer and user ids, so we can verify that bug report came from ticket.
 */
function desk_integration_desk_to_bugreport_process($body) {
  $keep = array('case_id', 'case_customer_id', 'case_user_id');
  $return = array_intersect_key($_REQUEST, array_flip($keep));
  $return = array_filter($return);
  
  if (count($return) < count($keep)) {
    return 'Invalid bug report.  Missing parameters';
  }
  
  return $return;
}

/**
 * @function desk_integration_desk_to_bugreport_complete
 * 
 * Displays bug report form.  Completion of form sends ticket to GS/GH
 */
function desk_integration_desk_to_bugreport_complete($payload, $responses) {
  require_once drupal_get_path('module', 'desk_integration') . '/desk_integration.pages.inc';
  return drupal_get_form('desk_integration_bug_report', $payload['case_id'], $payload['case_customer_id'], $payload['case_user_id']);
}

/**
 * @function desk_integration_desk_to_bugreport_setup
 * 
 * Registers bug report url as a desk.com integration url
 */
function desk_integration_desk_to_bugreport_setup() {
  $name = '(testing) Create Bug Report';
  global $base_url;
  
  //create a service
  $url = $base_url . '/integrated_support/desk_to_bugreport?';
  $config = array(
    'name' => $name,
    'description' => t('Send tickets to other services'),
    'enabled' => TRUE,
    'markup' => $url,  //template can be straight up vars now.  no need for json
  );
  
  desk_integration_setup_integration_url($name, $config);
}


/**
 * @function desk_integration_update_cases
 * 
 * Updates the desk issue specified with $case_id or array($ids) with the other properties.
 */
function desk_integration_update_cases($case_ids, $github_issue_id, $github_milestone = NULL, $github_status = NULL, $labels = array()) {
  $ret = array();
	if (!is_array($case_ids)) {                   
		$case_ids = array($case_ids);
	}                              
	                             
  $desk = desk_integration_client();
  $github_status = _desk_integration_validate_github_status($github_status);
  $notify_milestone = (variable_get('desk_notify_milestone', TRUE) && $github_milestone); //don't notify if no milestone is given
  $notify_closed = (variable_get('desk_notify_closed', TRUE) && $github_status); //don't notify if no status given

  $custom = array_filter(array('github_issue_id' => $github_issue_id, 'github_milestone' => $github_milestone, 'github_status' => $github_status));
  watchdog('desk', 'Updating cases [@cases] with @custom', array('@cases' => implode(', ', $case_ids), '@custom' => serialize($custom)));
  
	foreach ($case_ids as $id) {
    //optional notifications
    if ($notify_closed || $notify_milestone) {
      $case = $desk->api('case')->call('show', array('id' => $id));

      if ($notify_milestone && $case && $case->custom_fields->github_milestone != $github_milestone) {
        if (in_array('Hotfix', $labels)) {
          $msg = 'Your request has been scheduled to be fixed as soon as possible';
        } else {
          $msg = 'Your request has been scheduled to be fixed as part of the ' . $github_milestone . ' release.';
        }
      }

      if ($notify_closed && $case && $case->custom_fields->github_status != $github_status) {
        if (in_array('Hotfix', $labels)) {
          $msg = 'A fix has been developed for your request.  We will update our servers with the change shortly.';
        } else {
          $msg = 'Your request has been fixed in development.  The update is scheduled to go live as part of our ' . $github_milestone . ' release.';
        }
      }
      
      if (isset($msg) && $msg) {
        $ret[] = _desk_integration_case_reply($id, $msg); 
        $desk->api('case')->call('create_reply', array('id' => $id, 'body' => $msg, 'direction' => 'out'));
      }
    }

    //set state without notification
    $args = array('id' => $id, 'custom_fields' => $custom);
	  $response = $desk->api('case')->call('update', $args);
	  if (isset($response->message) && $response->message == DESK_INTEGRATION_CASE_LOCKED) {
	    desk_integration_enqueue('case', 'update', $args);
	  }
	}
  
  return $ret;
}

/**
 * @function _desk_integration_case_reply
 * 
 * Reply to a desk case.  Don't repost if reply text is already present.
 */
function _desk_integration_case_reply($id, $msg, $repost = FALSE) {
  $desk = desk_integration_client();
  
  $page = 1;
  while ($page) {
    $replies = $desk->api('case')->call('list_replies', array('id' => $id));    
    foreach ($replies->_embedded->entries as $reply) {
      if ($reply->body == $msg) {
        return NULL;
      }
    }
    
    //loop until we're out of pages
    $page = ($replies->_links->self->next) ? $page + 1 : FALSE; 
  }
  
  return $desk->api('case')->call('create_reply', array('id' => $id, 'body' => $msg, 'direction' => 'out'));
}

/*
 * @function _desk_validate_github_status($github_status);
 * 
 * Make sure github_status is one of the three valid options.
 */
function _desk_integration_validate_github_status($github_status) {
	switch (strtolower($github_status)) {
		case 'open':
		case 'repoened':
			return 'Open';
    case 'closed':
    	return 'Closed';
    default:
		  return NULL;
	}
}


/**
 * @function _desk_integration_payload_data()
 *
 * Retruns array of desk.com liquid template vars we're expecting to recieve.
 */
function _desk_integration_payload_data() {
  $data = array();
  require_once(drupal_get_path('module', 'desk_integration') . '/desk_liquid.inc');
  foreach (array_keys(desk_liquid_vars()) as $var) {
    $data[$var] = $_REQUEST[$var];
  }
  
  $data += array(
    'link' => 'http://'. variable_get('desk_subdomain') . '.desk.com/agent/case/' . $data['case_id'],
  );

  return $data;
}

/**
 * @function desk_integration_enqueue
 *
 * Save a call for later processing, mostlikely because the case was locked by another user
 */
function desk_integration_enqueue($api, $call, $args) {
  $queue = variable_get('desk_integration_backlog', array());
  $queue[] = array('api' => $api, 'call' => $call, 'args' => $args);
  variable_set('desk_integration_backlog', $queue);
}

/**
 * @function desk_integration_backlog
 * 
 * Desk can lock out tickets while they're owned by another user.  When this happens desk_integration enqueues them
 * to be processed later.
 */
function desk_integration_backlog() {
  $queue = variable_get('desk_integration_backlog', array());
  $desk = desk_integration_client();
  
  foreach ($queue as $key => $item) {
    $response = $desk->api($item['api'])->call($item['call'], $item['args']);
    if (!isset($response->message) || $response->message != DESK_INTEGRATION_CASE_LOCKED) {
      unset($queue[$key]);
    }  
  }
  
  variable_set('desk_integration_backlog', $queue);
}

/**
 * Implements hook_cron
 */
function desk_integration_cron() {
  desk_integration_backlog();
}