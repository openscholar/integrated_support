<?php

/**
 * @file trello_integration.module
 */

/**
 * Implements hook_menu
 */
function trello_integration_menu() {
  return array(
    'roadmap' => array(
      'title' => 'Roadmap',
      'page callback' => 'trello_integration_roadmap',
      'access arguments' => array('access content'),
    	'page arguments' => variable_get('integrated_support_in_planning',FALSE)? array('planned') : array('current'),
    ),
    'roadmap/current' => array(
      'title' => variable_get('integrated_support_in_planning',FALSE)?'Last Release':'In Development',
      'page callback' => 'trello_integration_roadmap',
      'page arguments' => array('current'),
      'access arguments' => array('access content'),
      'type' => variable_get('integrated_support_in_planning',FALSE)? MENU_LOCAL_TASK : MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'roadmap/planned' => array(
      'title' => 'Planned',
      'page callback' => 'trello_integration_roadmap',
      'page arguments' => array('planned'),
      'access arguments' => array('access content'),
      'type' => variable_get('integrated_support_in_planning',FALSE)? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      'weight' => 10,
    ),
    'roadmap/archive' => array(
      'title' => 'Past Improvements',
      'page callback' => 'trello_integration_roadmap',
      'page arguments' => array('archive'),
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
    ),
    'roadmap/to-review' => array(
      'title' => 'To Be Reviewed',
      'page callback' => 'trello_integration_roadmap',
      'page arguments' => array('to-review'),
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    ),
    'admin/config/integrated_support/trello' => array(
      'title' => 'Trello',
      'file' => '/trello_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('trello_integration_admin'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer site configuration')
    ),
    'trello_callback/%/%' => array( //service, id
      'title' => 'Trello callbacks',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_callback',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'),
    ),
    'trello/get/statuses' => array(
      'title' => 'Roadmap statuses',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_ajax_get_statuses',
      'access arguments' => array('access content'),
    ),
    'trello/get/closed/%' => array(
      'title' => 'Closed issues by milestone',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_ajax_get_closed',
      'access arguments' => array('access content'),
      'page arguments' => array(3),
    ),
    'trello/handler' => array(
      'title' => 'Trello Webhook Handler',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_webhook_handler',
      'access callback' => TRUE,
      'file' => 'trello_integration.callbacks.inc',
    ),
  );
}

/**
 * Implements hook_libraries_info
 *
 * Provides Trello.php from  https://bitbucket.org/mattzuba/php-trello
 */
function trello_integration_libraries_info() {
  return array(
    'php-trello' => array(
      'name' => 'PHP Trello API',
      'files' => array('php' => array('src/Trello/Trello.php')),
      'version' => 'master',
    ),
  );
}

/**
 * @function trello_integration_roadmap_page
 *
 * Page shows roadmaps in tables
 */
function trello_integration_roadmap_page($list_name) {
  //get the list
  $trello = trello_integration_client();
  $board = variable_get('trello_integration_roadmap');
  list(,,,,$board_id) = explode('/', $board);

  //get the roadmap board's list
  $list = _trello_integration_get_lists($board_id, $list_name);
  if (!$list) {
    watchdog('trello', 'Could not retrieve lists from trello.');
    return array('msg' => array('#markup' => 'Roadmap unavailable'));
  }

  //error message or rendered columns.  don't return yet - we still need to attach javascript.
  if (!isset($list)) {
    $render = array('columns' => array('msg' => array('#markup' => t('Could not find "@name" milestone', array('@name' => $list_name)))));
  } else {
    $render = array('columns' => trello_integration_roadmap_columns($list->name, $list->id));
  }

  //get milestones so we can get cached closed ticket lists
  $milestone_id = _github_integration_milestone_get_id($list->name);
  $cached_closed = cache_get('trello_integration_milestone_closed:' . $milestone_id);
  $cached_closed = ($cached_closed && $cached_closed->expire > time()) ? $cached_closed->data : NULL;

  //attach javascript, settings, and (maybe) cached status data
  $cached_statuses = cache_get('trello_integration_roadmap_statuses');
  $cached_statuses = ($cached_statuses && $cached_statuses->expire > time()) ? $cached_statuses->data : NULL;


  global $base_url;
  $js_settings = array(
    'ajax_path' => $base_url . '/trello/get',
    'roadmap_path' => $base_url . '/roadmap/',
    'roadmap_statuses' => isset($cached_statuses) ? $cached_statuses : NULL,
    'roadmap_closed' => isset($cached_closed) ? $cached_closed : NULL,
    'milestone' => (isset($list)) ? $list->name : NULL,
  );

  $render += array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'trello_integration') . '/trello_integration.roadmap.css',
        drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration_roadmap.css',
      ),
      'js' => array(
        array('type' => 'file', 'data' => drupal_get_path('module', 'trello_integration') . '/trello_integration_roadmap.js'),
        array('type' => 'setting', 'data' => array('trello_integration_roadmap' => $js_settings)),
      ),
    ),
  );

  return $render;
}

/**
 * @function trello_integration_roadmap_columns()
 *
 * Fetch cards in a list, and draw them in a three column layout.
 */
function trello_integration_roadmap_columns($list_name, $list_id, $labels = array()) {
  $data = &drupal_static(__FUNCTION__, array());
  $trello = trello_integration_client();
  if (!isset($data[$list_id])) {
    $arguments = array(
      'members' => true,
    );
    $cards = $trello->lists($list_id)->cards()->get(NULL, $arguments);

    // cache this so we can call this function multiple times if necessary without occuring a performance hit
    $data[$list_id] = trello_integration_roadmap_columns_cards_data($cards, $list_name);
  }

  if (empty($labels)) {
    $use_lists = array('New Features' => array(), 'Bug Fixes' => array(), 'Infrastructure Upgrades' => array());
  }
  else {
    $use_lists = array_fill_keys($labels, array());
  }

  $list_data = array_merge($use_lists, array_intersect_key($data[$list_id], $use_lists));

  $render = array(
    '#prefix' => '<div class="milestone-wrapper clearfix">',//<h2>' . $list_name . '</h2>',
    '#suffix' => '</div>',
    'lists' => array(),
  );

  if (empty($list_data)) {
    $render['lists'] = array(
      '#markup' => t('Nothing in this milestone'),
    );
  }

  foreach ($list_data as $label => $items) {
    $render['lists'][] = array(
      '#title' => $label,
      '#theme' => 'item_list',
      '#items' => $items,
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('ticket-list', strtolower($label)),
      )
    );
  }

  return $render;
}

function trello_integration_roadmap_columns_cards_data($cards, $list_name) {
  $list_data = array();
  libraries_load('php-markdown');

  foreach ($cards as $card) {
    //choose a list bucket.
    @$labels = array_map(function($o) {return $o->name;}, $card->labels); //only use first label.  ambiguities can be fixed in trello.

    if (!is_array($labels)) $labels = array();
    @list($label) = $labels;

    $initiatives = in_array('Initiatives',$labels);

    // begin the output array
    $output = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'roadmap-item',
          'get-status'
        ),
        'data-hash' => _trello_integration_milestone_url($card->name),
        'data-trello-shortLink' => $card->shortLink,

      ),
      'label' => array(
        '#markup' => '<span>'.$card->name.'</span>',
      ),
      'popup' => array(
        '#prefix' => '<div class="roadmap-popup-text">',
        'text' => array(
          '#markup' => Michelf\Markdown::defaultTransform( strip_tags($card->desc) ),
        ),
        '#suffix' => '</div>',
      )
    );

    if ($m = current($card->members)) {
      $output['#attributes']['data-trello-owner'] = $m->initials;
    }

    //get the status from GH
    $linkages = integrated_support_get_links('trello', $card->id, 'github');

    // there's only ever one github link
    $id = '';
    if (!empty($linkages)) {
      $gh = current($linkages);
      $output['#attributes']['data-gh-id'] = $gh['id'];
      $output['gh'] = array(
        '#theme' => 'link',
        '#path' => 'http://github.com/openscholar/openscholar/issues/'.$gh['id'],
        '#text' => 'Github', //theme('image', array('/path/to/octocat')),
        '#options' => array(
          'attributes' => array(
            'class' => array('github-link')
          ),
          'html' => TRUE,
          'external' => TRUE
        ),
        '#access' => user_access('view github link'),
      );
    }

    if($initiatives) {
      $output['#attributes']['class'][] = 'initiative';
    }

    //build the link
    $output = drupal_render($output);//"<span class=\"get-status\"$id data-trello-id=\"$card->id\">$card->name</span>";

    $list_data[$label][] = $output;

    if($initiatives) {
      $list_data['Current Initiatives'][] = $output;
    }
  }

  return $list_data;
}
/**
 * @function trello_integration_client
 *
 * Returns client object for accessing trello.
 */
function trello_integration_client() {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  libraries_load('php-trello');
  require_once(drupal_get_path('module', 'trello_integration') . '/trello_integration.client.inc');

  $key = variable_get('trello_integration_key');
  $secret = variable_get('trello_integration_secret');
  $token = variable_get('trello_integration_token');

  if (!$key || !($secret || $token)) {
    throw new Exception('Trello isn\'t configured.');
  }

  $trello = ($token) ?  new OSTrello($key, NULL, $token) : new OSTrello($key, $secret);
  return $trello;
}


/**
 * @function trello_integration_roadmap
 *
 * Displays a roadmap based on cards from trello.
 */
function trello_integration_roadmap($page = 'current') {
  $output = array();

  // Include the dialog UI even if you are not an Admin.
  drupal_add_library('system', 'ui.dialog');

  //Include the tooltip library for tooltips
  drupal_add_library('system', 'ui.tooltip');

  $roadmap = variable_get('trello_integration_roadmap');
  list(,,,,$roadmap_id) = explode('/', $roadmap);
  $all_lists = array_keys(_trello_integration_get_lists($roadmap_id));

  $output['sidebar'] = array();

  //get milestones.  backlog isn't a milestone, so we don't have to skip it.
  // do this here so we can use the current milestone to get hotfixes
  $milestones = array_reduce(github_integration_milestones(array('direction' => 'asc')), function($ret, $a) {
    $ret[ $a['number'] ] = $a['title']; return $ret;
  });

  $timestamps = array_map(function ($i) {
    return strtotime($i);
  }, $milestones);
  asort($timestamps);
  $list_name = $milestones[key($timestamps)];

  // the hotfix list
  $current_list = _trello_integration_get_lists($roadmap_id, $list_name);
  $hotfix = array(
    '#prefix' => '<div id="os-hotfixes">',
    '#suffix' => '</div>',
    '#weight' => 2
  );
  $hotfix  += trello_integration_roadmap_columns($list_name, $current_list->id, array('Hotfix'));

  // The backlog list that has major intitives in it.
  $backlog_list = _trello_integration_get_lists($roadmap_id, "Backlog");
  $initiatives = array(
    '#prefix' => '<div id="os-initiative">',
    '#suffix' => '</div>',
    '#weight' => 2
  );
  $initiatives  += trello_integration_roadmap_columns("Backlog", $backlog_list->id, array('Current Initiatives'));

  switch ($page) {
    case 'current':
      // figure out what 'current' means.
      // should be the list with the next upcoming date

      $planning_text = (variable_get('integrated_support_in_planning',FALSE) && variable_get('trello_integration_released_text',TRUE)) ? "<span class='planning'><br />".variable_get('trello_integration_released_text',"This release has gone live.  We are performing any needed<br> stabilization and preparing for the next release.")."</span>":"";
      //If we are adding extra text shift the text up a little.
      $extra_room = $planning_text?" class='shift-up' ":"";
      $output['milestone'] = array(
        '#weight' => -10,
        '#prefix' => '<div id="roadmap-info"'.$extra_room.'>',
        '#suffix' => '</div>',
        '#markup' => t('Estimated Release Date: @date', array('@date' => $list_name)).$planning_text,
      );

      //legend.
      $options = array_values(variable_get('getsatisfaction_roadmap_status_labels'));
      $checkboxes = array_reduce($options, function($ret, $s) {
        $txt = ($s == 'Development') ? 'Dev' : $s;
        switch ($s) {
          case 'Pending':
            $tooltip = "We're waiting on something else to happen before we can work on this.";
          break;
          case 'Design':
            $tooltip = "Our designers are hard at work.";
          break;
          case 'Development':
            $tooltip = "Serious coding going on now.";
          break;
          case 'Review':
            $tooltip = "We're checking each other's code to make sure it meets our standards.";
          break;
          case 'Testing':
            $tooltip = "Double-checking that everything works as expected.";
          break;
          case 'Done':
            $tooltip = "Ready to go!";
          break;
          default:
            $tooltip = "";
          break;
		}

        $ret[$s] = array('#markup' => "<label class='".strtolower($s)."'><input type='checkbox' name='$s' value='$s' /><span title=\"{$tooltip}\">$txt</span></label>");
        return $ret;
      });

      $output['legend'] = array(
        'options' => $checkboxes,
        '#prefix' => '<div id="roadmap-legend"><span>Color key indicates stages in the development cycle</span><form>',
        '#suffix' => '</form></div>',
        '#weight' => -100,
      );

      $output['sidebar']['initiatives'] = $initiatives;
      $output['sidebar']['hotfix'] = $hotfix;

      break;
    case 'planned':
      // we know this list already
      $list_name = 'Backlog';
      if (variable_get('integrated_support_planning_text',FALSE)) {
      	$output['planning_text'] = array(
      			'#weight' => -10,
      			'#prefix' => '<div id="roadmap-info" class="planning"><span id="planning-text">',
      			'#suffix' => '</span></div>',
      			'#markup' => variable_get('integrated_support_planning_text',FALSE),
      	);
      }

      $output['sidebar']['initiatives'] = $initiatives;
      $output['sidebar']['hotfix'] = $hotfix;

      break;
    case 'to-review':
      // this one too
      $list_name = 'Pending Review';
      break;
    case 'archive':
    default:
      // get all closed milestones and display the most recent one
      // if the $page isn't 'archive', then it's a closed milestone
      $archives = array_reduce(github_integration_milestones(array('state' => 'closed')), function($ret, $a) {
        $ret[ $a['number'] ] = $a['title']; return $ret;
      });

      krsort($archives);

      // assume the list is the first archive
      $list_name = current($archives);
      $args = func_get_args();
      if (count($args) > 1) {
        $page = $args[1];
      }
      // check the other lists to see if $page matches it
      // that's the real list
      foreach ($archives as $ln) {
        if ($page == _trello_integration_milestone_url($ln)) {
          $list_name = $ln;
          break;
        }
      }

      $output['milestone'] = array(
        '#weight' => -10,
        '#prefix' => '<div id="roadmap-info">',
        '#suffix' => '</div>',
        '#type' => 'select',
        '#options' => drupal_map_assoc(array_intersect($archives, $all_lists)),
        '#value' => $list_name,
        '#attributes' => array('id' => 'select_milestone'),
      );

      //precalculate url formatting so we don't have to maintain php and js copies of same funciton
      $milestone_urls = array_reduce($archives, function ($ret, $ms) {
        $ret[$ms] = _trello_integration_milestone_url($ms); return $ret;
      });
      $output['milestone']['#attached'] = array(
        'js' => array(
          array(
            'data' => array(
              'trello_integration_roadmap' => array(
                'milestones' => $milestone_urls,
              )
            ),
            'type' => 'setting',
          )
        )
      );
      $output['milestone']['#attached']['js'][1]['data']['trello_integration_roadmap']['milestones'] = $milestone_urls;
      break;
  }

  //draw the current roadmap tab
  $output += trello_integration_roadmap_page($list_name);

  $output['sidebar'] += array(
    '#prefix' => '<div id="roadmap-sidebar">',
    '#suffix' => '</div>',
    'twitter' => array(
      '#prefix' => '<div id="os-twitter">',
      '#suffix' => '</div>',
      '#markup' => '<a class="twitter-timeline" href="https://twitter.com/osharvardstatus" data-widget-id="457247458108506112">Tweets by @osharvardstatus</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>',
      '#weight' => 3,
    ),
    '#weight' => 100,
  );

  if(isset($output['columns'])) {
    $output['columns']['#weight'] = 10;
  }

  return $output;
}



/**
 * @function trello_integration_integrated_support_webhook
 *
 * wrapper for webhook.  creates a webhook to a specific service here.
 */
function trello_integration_integrated_support_webhook($trello_id, $service, $service_id, $description = '') {
  global $base_url;
  $callback_url = "$base_url/trello_callback/$service/$service_id";
  $trello = trello_integration_client();

  return $trello->webhooks()->create(array(
    'idModel' => $trello_id,
    'callbackURL' => check_url(check_plain($callback_url)),
    'description' => $description,
  ));
}

/**
 *
 */
function trello_integration_integrated_support_event($event, $payload) {

  $return = array();
  switch ($event) {
    case 'github_issue':
      // check the issue for a 'new ticket' flag
      $import = variable_get('trello_integration_import', array());
      if (empty($import)) return;

      // there's already a card for this issue. Do nothing.
      $links = integrated_support_get_links('github', $payload['id'], 'trello');
      if (!empty($links)) return;

      $board = variable_get('trello_integration_intake');
      if (!$board) {
        return; //intake board is not enabled.
      }
      list(,,,,$board_id) = explode('/', $board);

      $client = trello_integration_client();
      $imported = variable_get('trello_integration_cards_imported');

      foreach ($import as $label_name => $import) {
        if (!isset($import['github'])) continue;

        $search = $import['github']['labels'];
        if (in_array($search, $payload['labels'])) {
          list($payload['html_url'],) = explode('#', $payload['url']);
          $card = _trello_integration_prepare_card($board_id, 'github', $payload, $label_name, $payload['milestone']);
          $card = $client->card()->create($card);

          if ($card == FALSE) {
            watchdog('trello', t('Error sending card from @service to Trello.', array('@service' => $service)));
            watchdog('trello', $trello->error());
          }
          else {
            integrated_support_link_services($card['name'], 'trello', $card->id, 'github', $payload['id']);
            if ($imported['label_name'] < $payload['id']) {
              $imported['label_name'] = $payload['id'];
              variable_set('trello_integration_cards_imported', $imported);
            }
          }
        }
      }
    break;
  }

  return $return;
}

/**
 * @function trello_integration_callback
 *
 * Callback URL for trello webhooks
 */
function trello_integration_callback($service, $id) {
  //no cache for you!  varnish should never cache this page.
  drupal_add_http_header('Cache-Control', 'no-store, no-cache, must-revalidate');
  drupal_add_http_header('Pragma', 'no-cache');

  $json = @file_get_contents('php://input');
  $payload = json_decode($json);
  $gh = github_integration_client();
  $trello = trello_integration_client();
  watchdog('trello', "Trello recieved a @type webhook for \"@id\" on \"@service\":<br />@hook", array('@id' => $id, '@service' => $service, '@hook' => $json, '@type' => $payload->action->type));

  switch ($payload->action->type) {
    case 'moveCardToBoard':
      //check that we're on intake and roadmap
      $source = $trello->boards($payload->action->data->boardSource->id)->get();
      $dest   = $trello->boards($payload->action->data->board->id)->get();
      if ($source->url != variable_get('trello_integration_intake') || $dest->url != variable_get('trello_integration_roadmap')) {
        return;
      }

      //apply label depending on the type of the ticket
      if ($color = _trello_integration_get_card_label($service, $id)) {
        $trello->cards($payload->model->id)->labels()->update($color);
      }

      //update milestone
      _trello_integration_callback_list_changed($payload->model->idList, $service, $id);

      break;

    case 'addMemberToCard':
      //find the user mentioned
      $trello_user = $payload->action->member->username;
      $users = variable_get('trello_integration_github_users', array());
      $issue = ($service == 'github') ? github_integration_issue($id) : NULL;

      //if we have a matching user and the ticket isn't assigned, assign it.
      if ($issue && !$issue['user'] && isset($users[$trello_user])) {
        watchdog('trello', 'Assigning ticket @id to @user', array('@id' => $id, '@user' => $users[$trello_user]));
        $gh->api('issue')->update(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $id, array('assignee' => $users[$trello_user],));
      }
      break;

    case 'updateCard':
      if (!isset($payload->action->data->listAfter)) {
        break; //updateCard is not unique to moves.
      }

      $board = $trello->boards($payload->model->idBoard)->get();
      if ($board->url == variable_get('trello_integration_roadmap')) {
        _trello_integration_callback_list_changed($payload->model->idList, $service, $id);
      }

      break;
  }

  return 'ok';
}

/*
 * @function _trello_integration_callback_list_changed($list_id, $service, $github_id)
 *
 * Checks if a card's new list is a milestone.  Adjusts github milestone if it is.  Creates GH issue if necessary
 */
function _trello_integration_callback_list_changed($list_id, $service, $id) {
  $trello = trello_integration_client();
  $gh = github_integration_client();
  $list = $trello->lists($list_id)->get();
  $milestones = array_reduce(github_integration_milestones(), function($ret, $m) {
    $ret[$m['title']] = $m['number'];
    return $ret;
  });

  $github_id = ($service == 'github') ? $id : _getsatisfaction_integration_linked_issue($id);

  //if the new list is a milestone, move the GH ticket to that milestone
  if (isset($milestones[$list->name])) {
    $gh->api('issue')->update(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $github_id, array('milestone' => $milestones[$list->name],));
  }
}

/**
 * @function trello_integration_ticket_sync()
 *
 * Copies cards from getsatsifaction and github into trello
 */
function trello_integration_ticket_sync() {
  github_integration_client(TRUE, FALSE); //set cached github client to use markdown before search function initializes it with html
  $imported = variable_get('trello_integration_cards_imported', array());
  $trello = trello_integration_client();
  $board = variable_get('trello_integration_intake');
  if (!$board) {
    return; //intake board is not enabled.
  }
  list(,,,,$board_id) = explode('/', $board);

  foreach (variable_get('trello_integration_import') as $label_name => $import) {
    foreach ($import as $service => $params) {
      //get matching tickets
      $search = '_' . $service . '_integration_newer_issues';
      $last_id = (isset($imported[$label_name])) ? $imported[$label_name] : 0;
      $results = (function_exists($search)) ? $search($last_id, $params) : array();
      if (!$results) {
        continue;
      }
      $imported[$label_name] = max(array_keys($results));

      foreach ($results as $ticket) {
        //extract relevant info.  don't post duplicates.
        $card = _trello_integration_prepare_card($board_id, $service, $ticket, $label_name);
        if ($card) {
          $gh_issue_link = FALSE;
          //Check if there is already a GH issue with this GS topic.
          if($service == 'getsatisfaction' && ($gh_issue_link = _getsatisfaction_integration_linked_issue($card['id'], FALSE))) {
            // See if this is already in a milestone.
            $results = db_select('getsatisfaction_service_map', 'gs')
            ->condition('id', $card['id'])
            ->condition('external_service', 'github_integration')
            ->fields('gs', array('milestone'))
            ->range(0,1)
            ->execute();

            watchdog('trello', t('Card @card added existing GH link @gh.', array('@card' => $card['id'],'@gh' => $gh_issue_link)));
            if ($results->rowCount() && ($milesotone = $results->fetchColumn())) {
              watchdog('trello', t('Card @card added directly to milestone @mile.', array('@card' => $card['id'],'@mile' => $milesotone)));
              $card = _trello_integration_prepare_card($board_id, $service, $ticket, $label_name, $milesotone);
            }
          }

          $new_card = $trello->cards()->create($card);
          if ($card == FALSE) {
            watchdog('trello', t('Error sending card from @service to Trello.', array('@service' => $service)));
            watchdog('trello', $trello->error());
          }
          else {
            integrated_support_link_services($card['name'], 'trello', $new_card->id, $service, $card['id']);

            if($gh_issue_link) {
              integrated_support_link_services($card['name'], 'trello', $new_card->id, 'github', $gh_issue_link);
            }
          }
        }
      }
    }
  }

  //save the list of exported tickets
  variable_set('trello_integration_cards_imported', $imported);
}

/**
 * Implements hook_cron.
 */
function trello_integration_cron() {
  trello_integration_ticket_sync();
}

/**
 * @function _trello_integration_prepare_card()
 *
 * Given a service and a ticket from that service, return an array of items to send to trello
 */
function _trello_integration_prepare_card($board_id, $service, $ticket, $label_name, $trello_list = FALSE) {
  $list = FALSE;
  //Lookup list if lable is passed.
  if($trello_list) {
    $list = _trello_integration_get_lists($board_id, $trello_list);
  }

  //Use Default List
  if(!$list) {
    $list = _trello_integration_get_lists($board_id, variable_get('trello_integration_default_list'));
  }

  switch ($service) {
    case 'github':
      $mapped = db_select('getsatisfaction_service_map', 'gs')
        ->condition('external_id', $ticket['number'])
        ->condition('external_service', 'github_integration')
        ->fields('gs')
        ->range(0, 1)
        ->execute();
      if ($mapped->rowCount()) {
        return NULL; //don't create github cards when mapped.  gs card shoudl already exist.
      }

      $body = (isset($ticket['body'])) ? $ticket['body'] : $ticket['body_html'];
      $return = array(
        'name' => $ticket['title'],
        'desc' => _trello_integration_html_to_markdown('['.$ticket['html_url'].']('.$ticket['html_url'] . "')\n\n" .$body),
        'id' => $ticket['number'],
      );

      //do we have a milestone?  if so, find and use that list instead.
      if ($ticket['milestone']) {
        $roadmap = variable_get('trello_integration_roadmap');
        list(,,,,$roadmap_id) = explode('/', $roadmap);
        $milestone_list = _trello_integration_get_lists($roadmap_id, $ticket['milestone']['title']);

        if ($milestone_list) {
          $board_id = $roadmap_id;
          $list = $milestone_list;
        }
      }
      break;

    case 'getsatisfaction':

      $links = array("[View or participate in the full discussion on our Community website]({$ticket->at_sfn})");

      //By default we don't include GH links on the top of trello cards.
      if(variable_get('trello_integration_add_ghlink_to_card', FALSE)) {
        //if we have a mapping, get the github link as well.
        $mapped = db_select('getsatisfaction_service_map', 'gs')
        ->condition('id', $ticket->id)
        ->condition('external_service', 'github_integration')
        ->fields('gs', array('external_id'))
        ->execute();

        if ($mapped->rowCount()) {
          $row = $mapped->fetchCol();
          $links = array_merge($links, array_map(function($i) {$gh = github_integration_issue($i); return '['.$gh['title'].']('.$gh['html_url'].')';}, $row));
        }
      }

      $return = array(
        'name' => $ticket->subject,
        'desc' => implode("\n", $links)."\n\n**The Plan**\n\n[coming soon]\n\n**Description**\n\n"._trello_integration_html_to_markdown($ticket->content),
        'id' => $ticket->id,
      );
      break;

    default:
      return NULL;
  }

  $colors = variable_get('trello_integration_colors', array());
  $return['idList'] = $list->id;
  $return['labels'] = (isset($colors[$label_name])) ? $colors[$label_name] : NULL;

  return $return;
}

/**
 * @function _trello_integration_html_to_markdown()
 *
 * Trello uses markdown.  GetSatisfaction uses html.  Convert html during ticket import.
 * Considered using a library, but GS uses such a small subset of HTML that this seemed easier.
 *
 * @param string $html
 *   $html to convert
 * @param array $assets
 *   Assets to attach to the card will be added to this array.
 *
 * Returns markdown
 */
function _trello_integration_html_to_markdown($html) {
  $regexes = array();

  //link
  $regexes['|<a.*?href=[\'"](.*?)[\'"].*?>(.*?)</a>|'] =  '[$2]($1)';

  //image
  $regexes['|<img.*?src=[\'"](.*?)[\'"].*?>|'] = '![img]($1)';

  //clean up
  $regexes['|<ul><br />|'] = '';
  $regexes['|<li>(.*?)<br /></li>|'] = '<li>$1</li>';
  $regexes['|</li><br />([\s]*)<li>|'] = '</li>$1<li>';

  //lists (making them all ul for simplicity's sake)
  $regexes['|</?ul>|'] = '';
  $regexes['|</?ol>|'] = '';
  $regexes['|<li>(.*?)</li>|s'] = '* $1';

  //bold
  $regexes['|<strong>(.*?)</strong>|'] = '**$1**';
  $regexes['|<b>(.*?)</b>|'] = '**$1**';

  //newline
  $regexes['|<br>|'] = "\n";
  $regexes['|<br ?/>|'] = "\n";

  //italics
  $regexes['|<em>(.*?)</em>|'] = '*$1*';
  $regexes['|<i>(.*?)</i>|'] = '*$1*';

  //underline does not exist in markdown
  $regexes['|<u>(.*?)</u>|'] = '$1';

  //strikeout
  $regexes['|<s>(.*?)</s>|'] = '~~$1~~';
  $regexes['|<strike>(.*?)</strike>|'] = '~~$1~~';

  //paragraph
  $regexes['|<p>(.*?)</p>|'] = "\n\n" . '$1' . "\n\n";
  $regexes['|</?p>|'] = "\n";

  //code
  $regexes['|<code>(.*?)</code>|s'] = '```$1```';

  //blockquote
  $regexes['|<blockquote>(.*?)</blockquote>|s'] = '> $1';

  foreach ($regexes as $pattern => $replacement) {
    $html = preg_replace($pattern, $replacement, $html);
  }

  return $html;
}

/**
 * @function _trello_integration_get_lists
 *
 * Gets trello list(s) by name
 */
function _trello_integration_get_lists($board_id, $name = NULL) {
  static $trello_lists;
  if (empty($trello_lists) || empty($trello_lists[$board_id])) {
    $trello = trello_integration_client();
    $trello_lists[$board_id] = array();

    foreach ($trello->boards($board_id)->lists()->get(NULL, array('filter' => 'all')) as $list) {
      $trello_lists[$board_id][$list->name] = $list;
    }
  }

  if ($name) {
    return isset($trello_lists[$board_id][$name]) ? $trello_lists[$board_id][$name] : NULL;
  }

  return $trello_lists[$board_id];
}

/**
 * @function _trello_integration_get_card_label
 *
 * See if there's a label for this trello card.
 */
function _trello_integration_get_card_label($service, $id) {
  $trello = trello_integration_client();

  switch ($service) {
    case 'github':
      $ticket = github_integration_issue($id);
      break;

    case 'getsatisfaction':
      $ticket = getsatisfaction_integration_topic($id);
      break;

    default:
      $ticket = NULL;
  }



  //test if this ticket belongs to any of our services and matches their criteria for adding a ticket
  //returns the label for htat card type if it does.
  $ticket = (array) $ticket;
  $colors = variable_get('trello_integration_colors', array());

  foreach (variable_get('trello_integration_import') as $label => $import) {
    foreach ($import as $import_service => $criteria) {
      if ($service == $import_service) {

        if (empty($criteria)) {
          return isset($colors[$label]) ? $colors[$label] : NULL;
        }

        foreach ($criteria as $key => $value) {

          if (@!isset($ticket[$key]) || $ticket[$key] != $value && !in_array($value, $ticket[$key])) {
            break;
          }

          return isset($colors[$label]) ? $colors[$label] : NULL;
        }
      }
    }
  }
}

/**
 * @function trello_integration_ajax_get_statuses
 *
 * Gets list of tickets by status for ajax
 */
function trello_integration_ajax_get_statuses() {
  //github labels -> roadmap labels mapping.  order matters, higher on list = higher precedence
  $label_status = variable_get('getsatisfaction_roadmap_status_labels', array(
    'status: fixed' => 'Done',
    'status: needs qa' => 'Testing',
    'status: needs review' => 'Review',
    'status: in dev' => 'Development',
    'status: needs spec' => 'Design',
    'status: pending' => 'Pending',
  ));

  //get ids of tickets all tickets matching a label status
  $return = array();
  foreach ($label_status as $label => $title) {
    $return[$title] = github_integration_issues_by_label($label);
  }

  //cache it
  cache_set('trello_integration_roadmap_statuses', $return, 'cache', time() + 1800); //30min cache

  print drupal_json_encode($return);
  exit;
}

/**
 * function trello_integration_ajax_get_closed()
 *
 * Ajax call gets list of closed tickets within a milestone
 */
function trello_integration_ajax_get_closed($milestone) {
  //milestones must be searched by number
  $milestone = urldecode($milestone);
  $milestones = array_merge(github_integration_milestones(), github_integration_milestones(array('state' => 'closed')));
  foreach ($milestones as $ms) {
    if (_trello_integration_milestone_url($ms['title']) == _trello_integration_milestone_url($milestone)) {
      $number = $ms['number'];
      $id = $ms['id'];
      break;
    }
  }

  if (isset($number)) {
    $key = 'trello_integration_milestone_closed:'.$id;
    $cached = cache_get($key);

    if ($cached && $cached->expire > time()) {
      print drupal_json_encode($cached->data);
    } else {
      $closed = github_integration_search(array('state' => 'closed', 'milestone' => $number));
      $return = array_map(function($a) {return $a['number'];}, $closed);

      cache_set('trello_integration_milestone_closed:'.$id, $return, 'cache', time() + 1800); //30min cache
      print drupal_json_encode($return);
    }
  }

  exit;
}
/**
 * @function _trello_integration_milestone_url
 *
 * Makes milestone title url friendly.  urlencode by itself makes ugly urls.
 **/
function _trello_integration_milestone_url($milestone) {
  $milestone = str_replace(' ', '-', $milestone);
  $milestone = str_replace(array(',', '(', ')'), '', $milestone);
  $milestone = strtolower($milestone);
  return urlencode($milestone);
}

/**
 * Implements hook_integrated_support_linkage_delete.
 *
 * Deletes the trello card when the GS linkage is deleted.
 */
function trello_integration_integrated_support_linkage_delete($service, $id, $links) {
  switch ($service) {
    case 'getsatisfaction':
      $client = trello_integration_client();
      $to_delete = array();
      foreach ($links as $l) {
        if ($l['service'] == 'trello') {
          $client->cards()->delete($l['id']);
        }
      }
      break;
  }
}
