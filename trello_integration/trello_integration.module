<?php 

/**
 * @file trello_integration.module
 */

/**
 * Implements hook_menu
 */
function trello_integration_menu() {
  return array(
    'roadmap2' => array(
      'title' => 'Roadmap',
      //'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'trello_integration_roadmap',
      'access arguments' => array('access content'),
    ),
    'admin/config/integrated_support/trello' => array(        
      'title' => 'Trello',
      'file' => '/trello_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('trello_integration_admin'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer site configuration')
    ),
    'trello_callback/%/%' => array( //service, id
      'title' => 'Trello callbacks',
      'type' => MENU_CALLBACK,    
      'page callback' => 'trello_integration_callback',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'),
    ),
    'trello/get/statuses' => array( 
      'title' => 'Roadmap statuses',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_ajax_get_statuses',
      'access arguments' => array('access content'),
    ),
    'trello/get/closed/%' => array(
      'title' => 'Closed issues by milestone',
      'type' => MENU_CALLBACK,
      'page callback' => 'trello_integration_ajax_get_closed',
      'access arguments' => array('access content'),
      'page arguments' => array(3),
    ),
    
  );
}

/**
 * Implements hook_libraries_info
 *
 * Provides Trello.php from  https://bitbucket.org/mattzuba/php-trello
 */
function trello_integration_libraries_info() {
  return array(
    'php-trello' => array(
      'name' => 'PHP Trello API',
      'files' => array('php' => array('src/Trello/Trello.php')),
      'version' => 'master',
    ),
  );
}

/**
 * @function trello_integration_roadmap_page
 * 
 * Page shows roadmaps in tables
 */
function trello_integration_roadmap_page($list_name) {  
  //get the list
  $trello = trello_integration_client();
  $board = variable_get('trello_integration_roadmap');
  list(,,,,$board_id) = explode('/', $board);
  
  if (($lists = $trello->boards($board_id)->lists()->get(NULL, array('filter' => 'all'))) == FALSE) {
    watchdog('trello', 'Could not retrieve lists from trello.');
    return array('msg' => array('#markup' => 'Roadmap unavailable'));
  }
  
  foreach ($lists as $l) {
    if ($l->name == $list_name || _trello_integration_milestone_url($l->name) == $list_name) {
      $list = $l;
      break;
    }
  }
  
  //error message or rendered columns.  don't return yet - we still need to attach javascript.
  if (!isset($list)) {
    $render = array('milestone' => array('msg' => array('#markup' => t('Could not find "@name" milestone', array('@name' => $list_name)))));
  } else {
    $render = array('milestone' => trello_integration_roadmap_columns($list->name, $list->id));
  }
  
  //get milestones so we can get cached closed ticket lists
  $milestone_id = _github_integration_milestone_get_id($list->name);
  $cached_closed = cache_get('trello_integration_milestone_closed:' . $milestone_id);
  $cached_closed = ($cached_closed && $cached_closed->expire > time()) ? $cached_closed->data : NULL;
  
  //attach javascript, settings, and (maybe) cached status data
  $cached_statuses = cache_get('trello_integration_roadmap_statuses');
  $cached_statuses = ($cached_statuses && $cached_statuses->expire > time()) ? $cached_statuses->data : NULL;
  
  global $base_url;
  $js_settings = array(
    'ajax_path' => $base_url . '/trello/get',
    'roadmap_path' => $base_url . '/roadmap2/',
    'roadmap_statuses' => $cached_statuses,
    'roadmap_closed' => $cached_closed,
    'milestone' => $list->name,
  );
  
  $render += array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'trello_integration') . '/trello_integration.roadmap.css',
        drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration_roadmap.css',
      ),
      'js' => array(
        array('type' => 'file', 'data' => drupal_get_path('module', 'trello_integration') . '/trello_integration_roadmap.js'),
        array('type' => 'setting', 'data' => array('trello_integration_roadmap' => $js_settings)),
      ),
    ),
  );
  
  return $render;
}

/**
 * @function trello_integration_roadmap_columns()
 * 
 * Fetch cards in a list, and draw them in a three column layout.
 */
function trello_integration_roadmap_columns($list_name, $list_id) {
  $trello = trello_integration_client();
  $cards = $trello->lists($list_id)->cards()->get();
  $use_lists = array('Engineering' => array(), 'Bugs' => array(), 'Features' => array(), 'Hotfix' => array());
  $list_data = trello_integration_roadmap_columns_cards_data($cards);
  $list_data = array_merge($use_lists, array_intersect_key($list_data, $use_lists));
    
  $render = array(
    '#prefix' => '<div class="milestone-wrapper"><h2>' . $list_name . '</h2>',
    '#suffix' => '</div>',    
    'lists' => array(),  
  );
  
  if (empty($list_data)) {
    $render['lists'] = array(
      '#markup' => t('Nothing in this milestone'),  
    );  
  }
  
  foreach ($list_data as $label => $items) {
    $render['lists'][] = array(
      '#title' => $label,
      '#theme' => 'item_list',
      '#items' => $items,
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('milestone'),
      )
    );
  }
  
  return $render;
}

function trello_integration_roadmap_columns_cards_data($cards) {
  $list_data = array();
  
  foreach ($cards as $card) {
    //choose a list bucket.
    @list($label) = array_map(function($o) {return $o->name;}, $card->labels); //only use first label.  ambiguities can be fixed in trello.
    
    //get the status from GH  
    list($link) = explode("\n", $card->desc);
    if (filter_var($link, FILTER_VALIDATE_URL)) {
      if (strpos($link, 'github')) {
        list(,,,,,,$id) = explode('/', $link);
      } else {
        list(,,,,,$slug) = explode('/', $link);
        $id = _getsatisfaction_integration_linked_issue($slug);
      }
    }    
    $status = (isset($id)) ? "status-gh-$id" : 'status';
  
    //build the link
    $list_data[$label][] = l($card->name, $link, array('attributes' => array('class' => 'get-status ', 'id' => $status)));
  }
  
  return $list_data;
}
/**
 * @function trello_integration_client
 * 
 * Returns client object for accessing trello.
 */
function trello_integration_client() {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  libraries_load('php-trello');
  require_once(drupal_get_path('module', 'trello_integration') . '/trello_integration.client.inc');

  $key = variable_get('trello_integration_key');
  $secret = variable_get('trello_integration_secret');
  $token = variable_get('trello_integration_token');

  if (!$key || !($secret || $token)) {
    throw new Exception('Trello isn\'t configured.');
  }

  $trello = ($token) ?  new OSTrello($key, NULL, $token) : new OSTrello($key, $secret);
  return $trello;
}


/**
 * @function trello_integration_roadmap
 * 
 * Displays a roadmap based on cards from trello.
 */
function trello_integration_roadmap($milestone = NULL) {

  //get milestones.  backlog isn't a milestone, so we don't have to skip it.
  $milestones = array_reduce(github_integration_milestones(array('direction' => 'asc')), function($ret, $a) {
    $ret[ $a['number'] ] = $a['title']; return $ret;
  });

  $archives = array_reduce(github_integration_milestones(array('state' => 'closed')), function($ret, $a) {
    $ret[ $a['number'] ] = $a['title']; return $ret;
  });
  
  //use current unless specified
  $milestone = ($milestone) ? $milestone : current($milestones);
  
  //and draw the current roadmap tab
  $return = trello_integration_roadmap_page($milestone);


  //links and such
  $return['milestone']['info'] = array(
    '#weight' => -10,
    '#prefix' => '<div id="roadmap-info">',
    '#suffix' => '</div>',
    'links' => array(
      'select' => array(
        '#theme' => 'select',
        '#title' => 'Milestones',
        '#options' => array(
          'none' => '-- Select a milestone --',
          'Milestones' => $milestones,
          'Release Notes Archive' => $archives,
        ), 
        '#value' => 'none', 
        '#attributes' => array('id' => 'select_milestone'),
      ),
    )   
  );
  
  if ($milestone != 'backlog') {
    $return['milestone']['info']['backlog'] = array(
      '#markup' => l('View Backlog', 'roadmap2/backlog', array('attributes' => array('class' => array('backlog-link')))),
    );
  } 
  //precalculate url formatting so we don't have to maintain php and js copies of same funciton
  $milestone_urls = array_reduce($milestones + $archives + array('Backlog'), function ($ret, $ms) {
    $ret[$ms] = _trello_integration_milestone_url($ms); return $ret;
  });
  $return['#attached']['js'][1]['data']['trello_integration_roadmap']['milestones'] = $milestone_urls;
  
  
  //legend.
  $options = array_values(variable_get('getsatisfaction_roadmap_status_labels'));
  $checkboxes = array_reduce($options, function($ret, $s) {
    $ret[$s] = array('#markup' => "<label class='".strtolower($s)."'><input type='checkbox' name='$s' value='$s' checked /><span>$s</span></label>");
    return $ret;
  });
  
  $return['legend'] = array(
    'options' => $checkboxes,
    '#prefix' => '<div id=roadmap-legend><form>',
    '#suffix' => '</form></div>',
    '#weight' => -100,
  );
  
  return $return;
}
  
  

/**
 * @function trello_integration_integrated_support_webhook
 *
 * wrapper for webhook.  creates a webhook to a specific service here.
 */
function trello_integration_integrated_support_webhook($trello_id, $service, $service_id, $description = '') {
  global $base_url;
  $callback_url = "$base_url/trello_callback/$service/$service_id";
  $trello = trello_integration_client();
  
  return $trello->webhooks()->create(array(
    'idModel' => $trello_id,
    'callbackURL' => check_url(check_plain($callback_url)),
    'description' => $description,
  ));
}

/**
 * @function trello_integration_callback
 * 
 * Callback URL for trello webhooks
 */
function trello_integration_callback($service, $id) {
  //no cache for you!  varnish should never cache this page.
  drupal_add_http_header('Cache-Control', 'no-store, no-cache, must-revalidate');
  drupal_add_http_header('Pragma', 'no-cache');
  
  $json = @file_get_contents('php://input');
  $payload = json_decode($json);
  $gh = github_integration_client();
  $trello = trello_integration_client();
  watchdog('trello', "Trello recieved a @type webhook for \"@id\" on \"@service\":<br />@hook", array('@id' => $id, '@service' => $service, '@hook' => $json, '@type' => $payload->action->type));
  
  switch ($payload->action->type) {
    case 'moveCardToBoard':
      //check that we're on intake and roadmap
      $source = $trello->boards($payload->action->data->boardSource->id)->get();
      $dest   = $trello->boards($payload->action->data->board->id)->get();
      if ($source->url != variable_get('trello_integration_intake') || $dest->url != variable_get('trello_integration_roadmap')) {
        return; 
      }

      //apply label depending on the type of the ticket
      if ($color = _trello_integration_get_card_label($service, $id)) {
        $trello->cards($payload->model->id)->labels()->update($color);
      }
      
      //update milestone
      _trello_integration_callback_list_changed($payload->model->idList, $service, $id);
     
      break;
      
    case 'addMemberToCard':
      //find the user mentioned
      $trello_user = $payload->action->member->username;
      $users = variable_get('trello_integration_github_users', array());
      $issue = ($service == 'github') ? github_integration_issue($id) : NULL;
            
      //if we have a matching user and the ticket isn't assigned, assign it.
      if ($issue && !$issue['user'] && isset($users[$trello_user])) {
        watchdog('trello', 'Assigning ticket @id to @user', array('@id' => $id, '@user' => $users[$trello_user]));
        $gh->api('issue')->update(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $id, array('assignee' => $users[$trello_user],));
      }
      break;
      
    case 'updateCard':
      if (!isset($payload->action->data->listAfter)) {
        break; //updateCard is not unique to moves.
      }
      
      $board = $trello->boards($payload->model->idBoard)->get();
      if ($board->url == variable_get('trello_integration_roadmap')) {        
        _trello_integration_callback_list_changed($payload->model->idList, $service, $id);
      }
      
      break;
  }

  return 'ok';
}

/*
 * @function _trello_integration_callback_list_changed($list_id, $service, $github_id) 
 * 
 * Checks if a card's new list is a milestone.  Adjusts github milestone if it is.  Creates GH issue if necessary
 */
function _trello_integration_callback_list_changed($list_id, $service, $id) {
  $trello = trello_integration_client();
  $gh = github_integration_client();
  $list = $trello->lists($list_id)->get();
  $milestones = array_reduce(github_integration_milestones(), function($ret, $m) {
    $ret[$m['title']] = $m['number'];
    return $ret;
  });
  
  $github_id = ($service == 'github') ? $id : _getsatisfaction_integration_linked_issue($id); 

  //if the new list is a milestone, move the GH ticket to that milestone
  if (isset($milestones[$list->name])) {
    $gh->api('issue')->update(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $github_id, array('milestone' => $milestones[$list->name],));
  }
}

/**
 * @function trello_integration_ticket_sync()
 * 
 * Copies cards from getsatsifaction and github into trello
 */
function trello_integration_ticket_sync() {
  github_integration_client(TRUE, FALSE); //set cached github client to use markdown before search function initializes it with html
  $imported = variable_get('trello_integration_cards_imported', array());
  $trello = trello_integration_client();
  $board = variable_get('trello_integration_intake');
  if (!$board) {
    return; //intake board is not enabled.  
  }
  list(,,,,$board_id) = explode('/', $board); 
  
  foreach (variable_get('trello_integration_import') as $list_name => $import) {
    foreach ($import as $service => $params) {
      //get matching tickets
      $search = '_' . $service . '_integration_newer_issues';
      $last_id = (isset($imported[$list_name])) ? $imported[$list_name] : 0;
      $results = (function_exists($search)) ? $search($last_id, $params) : array();
      if (!$results) {
        continue;
      }
      $imported[$list_name] = max(array_keys($results));
      
      foreach ($results as $ticket) {
        //extract relevant info.  don't post duplicates.
        $card = _trello_integration_prepare_card($board_id, $service, $ticket, $list_name);
        if ($card && ($new = $trello->cards()->create($card)) != FALSE) {
          $wh = trello_integration_integrated_support_webhook($new->id, $service, $card['id']);
        }
      }
    }
  }
  
  //save the list of exported tickets
  variable_set('trello_integration_cards_imported', $imported);
}

/**
 * Implements hook_cron.
 */
function trello_integration_cron() {
  trello_integration_ticket_sync();
}

/**
 * @function _trello_integration_prepare_card()
 * 
 * Given a service and a ticket from that service, return an array of items to send to trello
 */
function _trello_integration_prepare_card($board_id, $service, $ticket, $list_name) {
  $list = _trello_integration_get_lists($board_id, $list_name);
  
  switch ($service) {
    case 'github':
      $mapped = db_select('getsatisfaction_service_map', 'gs')
        ->condition('external_id', $ticket['number'])
        ->condition('external_service', 'github_integration')
        ->fields('gs')
        ->range(0, 1)
        ->execute();
      if ($mapped->rowCount()) {
        return NULL; //don't create github cards when mapped.  gs card shoudl already exist.
      }
      
      $body = (isset($ticket['body'])) ? $ticket['body'] : $ticket['body_html'];
      $return = array(
        'name' => $ticket['title'],
        'desc' => $ticket['html_url'] . "\n\n" . _trello_integration_html_to_markdown($body),
        'id' => $ticket['number'],
      );
      
      //do we have a milestone?  if so, find and use that list instead.
      if ($ticket['milestone']) {
        $roadmap = variable_get('trello_integration_roadmap');
        list(,,,,$roadmap_id) = explode('/', $roadmap);
        $milestone_list = _trello_integration_get_lists($roadmap_id, $ticket['milestone']['title']);
        
        if ($milestone_list) {
          $board_id = $roadmap_id;
          $list = $milestone_list;
        }
      }
      break;
      
    case 'getsatisfaction':
      //if we have a mapping, get the github link as well.
      $mapped = db_select('getsatisfaction_service_map', 'gs')
        ->condition('id', $ticket->id)
        ->condition('external_service', 'github_integration')
        ->fields('gs', array('external_id'))
        ->execute();
        
      $links = array($ticket->at_sfn);
      if ($mapped->rowCount()) {
        $row = $mapped->fetchCol();
        $links = array_merge($links, array_map(function($i) {$gh = github_integration_issue($i); return $gh['html_url'];}, $row));
      }

      $return = array(
        'name' => $ticket->subject,
        'desc' => implode("\n", $links) . "\n\n--\n\n" . _trello_integration_html_to_markdown($ticket->content),
        'id' => $ticket->id,
      );
      break;
      
    default:
      return NULL;
  }
  
  $colors = variable_get('trello_integration_colors', array());
  $return['idList'] = $list->id;
  $return['labels'] = (isset($colors[$list_name])) ? $colors[$list_name] : NULL; 
  
  return $return;
}

/**
 * @function _trello_integration_html_to_markdown()
 * 
 * Trello uses markdown.  GetSatisfaction uses html.  Convert html during ticket import.
 * Considered using a library, but GS uses such a small subset of HTML that this seemed easier.
 * 
 * @param string $html
 *   $html to convert
 * @param array $assets
 *   Assets to attach to the card will be added to this array.
 *   
 * Returns markdown
 */
function _trello_integration_html_to_markdown($html) {
  $regexes = array();
  
  //link
  $regexes['|<a.*?href=[\'"](.*?)[\'"].*?>(.*?)</a>|'] =  '[$2]($1)';
  
  //image
  $regexes['|<img.*?src=[\'"](.*?)[\'"].*?>|'] = '![img]($1)';
  
  //bold
  $regexes['|<strong>(.*?)</strong>|'] = '**$1**';
  $regexes['|<b>(.*?)</b>|'] = '**$1**';
  
  //newline
  $regexes['|<br>|'] = "\n";
  $regexes['|<br ?/>|'] = "\n";
  
  //italics
  $regexes['|<em>(.*?)</em>|'] = '*$1*';
  $regexes['|<i>(.*?)</i>|'] = '*$1*';
  
  //underline does not exist in markdown
  $regexes['|<u>(.*?)</u>|'] = '$1';
  
  //strikeout
  $regexes['|<s>(.*?)</s>|'] = '~~$1~~';
  $regexes['|<strike>(.*?)</strike>|'] = '~~$1~~';
  
  //paragraph
  $regexes['|<p>(.*?)</p>|'] = "\n\n" . '$1' . "\n\n";
  $regexes['|</?p>|'] = "\n";
  
  //lists (making them all ul for simplicity's sake)
  $regexes['|</?ul>|'] = '';
  $regexes['|</?ol>|'] = '';
  $regexes['|<li>(.*?)</li>|'] = '* $1';
  
  //code
  $regexes['|<code>(.*?)</code>|'] = '```$1```';
  
  //blockquote
  $regexes['|<blockquote>(.*?)</blockquote>|'] = '> $1';
  
  foreach ($regexes as $pattern => $replacement) {
    $html = preg_replace($pattern, $replacement, $html);
  }
  
  return $html;
}

/**
 * @function _trello_integration_get_lists
 * 
 * Gets trello list(s) by name
 */
function _trello_integration_get_lists($board_id, $name = NULL) {
  static $trello_lists;
  if (empty($trello_lists) || empty($trello_lists[$board_id])) {
    $trello = trello_integration_client();
    $trello_lists[$board_id] = array();
            
    foreach ($trello->boards($board_id)->lists()->get(NULL, array('filter' => 'all')) as $list) {
      $trello_lists[$board_id][$list->name] = $list;
    }
  }
  
  if ($name) {
    return isset($trello_lists[$board_id][$name]) ? $trello_lists[$board_id][$name] : NULL;
  }
  
  return $trello_lists[$board_id];
}

/**
 * @function _trello_integration_get_card_label
 * 
 * See if there's a label for this trello card.
 */
function _trello_integration_get_card_label($service, $id) {
  $trello = trello_integration_client();

  switch ($service) {
    case 'github':
      $ticket = github_integration_issue($id);
      break;
      
    case 'getsatisfaction':
      $ticket = getsatisfaction_integration_topic($id);
      break;
      
    default:
      $ticket = NULL;
  }
  
  
  
  //test if this ticket belongs to any of our services and matches their criteria for adding a ticket
  //returns the label for htat card type if it does.
  $ticket = (array) $ticket;
  $colors = variable_get('trello_integration_colors', array());
  
  foreach (variable_get('trello_integration_import') as $label => $import) {
    foreach ($import as $import_service => $criteria) {
      if ($service == $import_service) {

        if (empty($criteria)) {
          return isset($colors[$label]) ? $colors[$label] : NULL;
        }
                
        foreach ($criteria as $key => $value) {

          if (@!isset($ticket[$key]) || $ticket[$key] != $value && !in_array($value, $ticket[$key])) {
            break;
          }
          
          return isset($colors[$label]) ? $colors[$label] : NULL;
        }
      }
    }
  }
}

/**
 * @function trello_integration_ajax_get_statuses
 * 
 * Gets list of tickets by status for ajax
 */
function trello_integration_ajax_get_statuses() {
  //github labels -> roadmap labels mapping.  order matters, higher on list = higher precedence
  $label_status = variable_get('getsatisfaction_roadmap_status_labels', array(
    'status: fixed' => 'Done',
    'status: needs qa' => 'Testing',
    'status: needs review' => 'Review',
    'status: in dev' => 'Development',
    'status: needs spec' => 'Design',
    'status: pending' => 'Pending',
  ));
  
  //get ids of tickets all tickets matching a label status
  $return = array();
  foreach ($label_status as $label => $title) {
    $return[$title] = github_integration_issues_by_label($label);
  }
  
  //cache it
  cache_set('trello_integration_roadmap_statuses', $return, 'cache', time() + 1800); //30min cache
  
  print drupal_json_encode($return);
  exit;
}

/**
 * function trello_integration_ajax_get_closed()
 * 
 * Ajax call gets list of closed tickets within a milestone
 */
function trello_integration_ajax_get_closed($milestone) {
  //milestones must be searched by number
  $milestone = urldecode($milestone);
  $milestones = github_integration_milestones() + github_integration_milestones(array('state' => 'closed'));
  foreach ($milestones as $ms) {
    if (_trello_integration_milestone_url($ms['title']) == _trello_integration_milestone_url($milestone)) {
      $number = $ms['number'];
      break;
    }
  }
  
  if (isset($number)) {
    $key = 'trello_integration_milestone_closed:'.$number;
    $cached = cache_get($key);
    
    if ($cached && $cached->expire > time()) { 
      print drupal_json_encode($cached->data);
    } else {
      $closed = github_integration_search(array('state' => 'closed', 'milestone' => $number));
      $return = array_map(function($a) {return $a['number'];}, $closed);
      
      cache_set('trello_integration_milestone_closed:'.$number, $return, 'cache', time() + 1800); //30min cache
      print drupal_json_encode($return);
    }
  }
  
  exit;
}
/**
 * @function _trello_integration_milestone_url
 * 
 * Makes milestone title url friendly.  urlencode by itself makes ugly urls.
 **/
function _trello_integration_milestone_url($milestone) {
  $milestone = str_replace(' ', '-', $milestone);
  $milestone = str_replace(array(',', '(', ')'), '', $milestone);
  $milestone = strtolower($milestone);
  return urlencode($milestone);  
}