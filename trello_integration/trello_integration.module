<?php 

/**
 * @file trello_integration.module
 */

/**
 * Implements hook_menu
 */
function trello_integration_menu() {
  return array(
    'trello_roadmap' => array(
      'title' => 'Trello Roadmap',
      //'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'trello_integration_roadmap',
      'access arguments' => array('access content'),
    ),
    'trello_callback/%/%' => array( //service, id
      'title' => 'Trello callbacks',
      'type' => MENU_CALLBACK,    
      'page callback' => 'trello_integration_callback',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Implements hook_libraries_info
 *
 * Provides Trello.php from  https://bitbucket.org/mattzuba/php-trello
 */
function trello_integration_libraries_info() {
  return array(
    'php-trello' => array(
      'name' => 'PHP Trello API',
      'files' => array('php' => array('Trello/Trello.php')),
      'version' => 'master',
    ),
  );
}

/**
 * @function trello_integration_client
 * 
 * Returns client object for accessing trello.
 */
function trello_integration_client() {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  libraries_load('php-trello');
  require_once(drupal_get_path('module', 'trello_integration') . '/trello_integration.client.inc');

  $key = variable_get('trello_integration_key');
  $secret = variable_get('trello_integration_secret');
  $token = variable_get('trello_integration_token');

  if (!$key || !($secret || $token)) {
    throw new Exception('Trello isn\'t configured.');
  }

  $trello = ($token) ?  new OSTrello($key, NULL, $token) : new OSTrello($key, $secret);
  return $trello;
}


/**
 * @function trello_integration_roadmap
 * 
 * Displays a roadmap based on cards from trello.
 */
function trello_integration_roadmap() {
  $trello = trello_integration_client();
  $list = '51ffe8d552d1cc2e7f0007f3';
  
  $colors = array('red', 'green', 'blue', 'yellow', 'purple', 'orange'); 
  shuffle($colors);
  $colors = array_slice($colors, 0, rand(1, count($colors)));
//    $board = $trello->boards('1xNAf1dj')->lists()->get();
// dpm($board);

  $card = array(
    'idList' => $list,
    'name' => 'new api key',
    'desc' => NULL,
    'due' => NULL,
    'labels' => NULL,
    'idMembers' => NULL,
  );
  //dpm($trello->cards()->create($card));
  
  $card_id = '520253a438a1ab8d64002f25';
  dpm($trello->cards($card_id)->get());
//   $trello->cards($card_id)->labels()->update(implode(',', $colors));
  
  $token = variable_get('trello_integration_token');
  dpm($trello->tokens($token)->webhooks()->get());
  
 
  // webhooks live in tokens.  need a ->all for shortcuts?
  
//  $m = $trello->tokens('token_id')->member('member_id')->get();
  $board = '1xNAf1dj'; 
  $lists = array();

  foreach ($trello->boards($board)->lists()->get() as $list) {
    if ($list->name == 'Inbox') {
      dpm($list);
      dpm($trello->lists($list->id)->cards()->get());
    }  
    
    $cards = $trello->lists($list->id)->cards()->get();
  //  $cards = trello_integration_cards($list->id);
    
    foreach ($cards as $card) {
      if ($card->badges->comments) {
        dpm($trello->cards($card->id)->actions()->comments()->get());
      }
    }
    
    $lists[] = array(   
      '#items' => array_map(create_function('$o', 'return $o->name;'), $cards),
      '#title' => $list->name,
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#attributes' => array(), 
    );
  }

  return $lists;
}


//wrapper for webhook.  creates a webhook to a specific service here.
function trello_integration_integrated_support_webhook($trello_id, $service, $service_id, $description = '') {
  if (!in_array($service, module_implements('integrated_support_info'))) {
    return;
  }
  
  //global $base_url;
  $base_url = 'http://140.247.184.89';
  $callback_url = "$base_url/trello_callback/$service/$service_id";
  $trello = trello_integration_client();
  
  return $trello->webhooks()->create(array(
    'idModel' => $trello_id,
    'callbackURL' => check_url(check_plain($callback_url)),
    'description' => $description,
  ));
  
  //trello_integration_create_webhook($trello_id, $callback_url, $description);
}

function trello_integration_callback($service, $id) {
  $payload = json_decode(@file_get_contents('php://input'));
  watchdog('trello', 'Trello recieved a webhook for "@id" on "@service": @hook', array('@id' => $id, '@service' => $service, '@hook' => serialize($payload)));
}

/**
 * @function trello_integration_ticket_sync()
 * 
 * Copies cards from getsatsifaction and github into trello
 */
function trello_integration_ticket_sync() {
  $imported = variable_get('trello_integration_cards_imported', array());
  $trello = trello_integration_client();
  
  //Each list is generated from service matching array full of search criteria
  $imports = array(      
    'Features' => array('getsatisfaction' => array('style' => 'idea')),
    'Bugs' => array('getsatisfaction' => array('style' => 'problem')),
    'Engineering' => array('github' => array('labels' => 'tr:eng')),
  );

  foreach ($imports as $list_name => $import) {
    foreach ($import as $service => $params) {
      //get matching tickets
      $search = $service . '_integration_search';
      $results = (function_exists($search)) ? $search($params) : array();
      
      foreach ($results as $ticket) {
        //extract relevant info.  don't post duplicates.
        $card = _trello_integration_prepare_card($service, $ticket, $list_name);
        if (isset($imported[$service]) && in_array($card['id'], $imported[$service])) {
          continue;
        }

        $imported[$service][] = $card['id'];
        $link = $card['link'];
        unset($card['link']);
        unset($card['id']);
        
        //create ticket and comment on it with link to original source.
        $card = $trello->cards()->create($card);
        $trello->cards( $card->id )->actions()->comments()->create(array('text' => $link));
      }
    }
  }
  
  //save the list of exported tickets
  variable_set('trello_integration_cards_imported', $imported);
}

/**
 * Implements hook_cron.
 */
function trello_integration_cron() {
  trello_integration_ticket_sync();
}

/**
 * @function _trello_integration_prepare_card()
 * 
 * Given a service and a ticket from that service, return an array of items to send to trello
 */
function _trello_integration_prepare_card($service, $ticket, $list_name) {
  switch ($service) {
    case 'github':
      $return = array(
        'id' => $ticket['number'],
        'name' => $ticket['title'],
        'desc' => $ticket['body_html'],
        'link' => $ticket['html_url'],
      );
      break;
      
    case 'getsatisfaction':
      $return = array(
        'id' => $ticket->id,
        'name' => $ticket->subject,
        'desc' => $ticket->content,
        'link' => $ticket->at_sfn,
      );
      break;
      
    default:
      return NULL;
  }
  
  $list = _trello_integration_get_lists($list_name);
  $return['idList'] = $list->id;
  
  return $return;
}

/**
 * @function _trello_integration_get_lists
 * 
 * Gets trello list(s) by name
 */
function _trello_integration_get_lists($name = NULL) {
  static $trello_lists;
  if (empty($trello_lists)) {
    $board_id = variable_get('trello_integration_board');
    $trello = trello_integration_client();
    $trello_lists = array();
    foreach ($trello->boards($board_id)->lists()->get() as $list) {
      $trello_lists[$list->name] = $list;
    }
  }
  
  return ($name) ? $trello_lists[$name] : $trello_lists;
}
