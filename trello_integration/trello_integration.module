<?php 

/**
 * @file trello_integration.module
 */

/**
 * Implements hook_menu
 */
function trello_integration_menu() {
  return array(
    'trello_roadmap' => array(
      'title' => 'Trello Roadmap',
      //'file' => '/getsatisfaction_integration.roadmap.inc',
      'page callback' => 'trello_integration_roadmap',
      'access arguments' => array('access content'),
    ),
    'admin/config/integrated_support/trello' => array(        
      'title' => 'Trello',
      'file' => '/trello_integration.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('trello_integration_admin'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer site configuration')
    ),
    'trello_callback/%/%' => array( //service, id
      'title' => 'Trello callbacks',
      'type' => MENU_CALLBACK,    
      'page callback' => 'trello_integration_callback',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Implements hook_libraries_info
 *
 * Provides Trello.php from  https://bitbucket.org/mattzuba/php-trello
 */
function trello_integration_libraries_info() {
  return array(
    'php-trello' => array(
      'name' => 'PHP Trello API',
      'files' => array('php' => array('Trello/Trello.php')),
      'version' => 'master',
    ),
  );
}

/**
 * @function trello_integration_roadmap_page
 * 
 * Page shows roadmaps in tables
 */
function trello_integration_roadmap_page($lists) {
  $trello = trello_integration_client();
  
  foreach($lists as $list) {
    $cards = $trello->lists($list->id)->cards()->get();
    $milestones[] = trello_integration_roadmap_table($list->name, $cards);
  }
  
  return $milestones;
}

/**
 * @function trello_integration_roadmap_page_table
 * 
 * Renders one milestone from the roadmap as a table
 */
function trello_integration_roadmap_table($name, $cards) {
  $data = array_map('trello_integration_roadmap_table_row', $cards);
  $header = array(
    array('data' => 'Topic', 'width' =>'75%'),
    'Last Update',
    'Status'
  );
  
  return array(
    '#theme' => 'table',
    '#prefix' => "<div class='milestone'><h2>$name</h2>",
    '#suffix' => '</div>',
    '#header' => $header,
    '#rows' => $data,
    '#attributes' => array(
      'class' => array('roadmap'),
      'border' => '0',
    ),
    '#attached' => array(
      'css' => array(array('type' => 'file', 'data' => drupal_get_path('module', 'getsatisfaction_integration') . '/getsatisfaction_integration_roadmap.css')),
    ),
  );
}

/**
 * @function trello_integration_roadmap_page_table_row
 * 
 * Renders a trello card into a table row for a milestone table
 */
function trello_integration_roadmap_table_row($card) {
  $class = 'style ' . strtolower(array_reduce($card->labels, function($val, $lbl) {return $val . ' style-' . $lbl->name;}, ''));
  list($link) = explode("\n", $card->desc);
  
  if (filter_var($link, FILTER_VALIDATE_URL)) {
    list(,,,,,,$id) = explode('/', $link);
    $issue = github_integration_issue($id);
  } 

  return array(
    "<span class='${class}'>$card->name</span>",
    format_interval(time() - strtotime($card->dateLastActivity), 1),
    (isset($issue)) ? _trello_integration_github_state($issue) : '',
  );  
}

/**
 * @function trello_integration_client
 * 
 * Returns client object for accessing trello.
 */
function trello_integration_client() {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  libraries_load('php-trello');
  require_once(drupal_get_path('module', 'trello_integration') . '/trello_integration.client.inc');

  $key = variable_get('trello_integration_key');
  $secret = variable_get('trello_integration_secret');
  $token = variable_get('trello_integration_token');

  if (!$key || !($secret || $token)) {
    throw new Exception('Trello isn\'t configured.');
  }

  $trello = ($token) ?  new OSTrello($key, NULL, $token) : new OSTrello($key, $secret);
  return $trello;
}


/**
 * @function trello_integration_roadmap
 * 
 * Displays a roadmap based on cards from trello.
 */
function trello_integration_roadmap() {
  $trello = trello_integration_client();
  $list = '51ffe8d552d1cc2e7f0007f3';
  
  dpm($trello->boards('52277bb46eaf6aad2f00013a')->get());
//   $colors = array('red', 'green', 'blue', 'yellow', 'purple', 'orange'); 
//   shuffle($colors);
//   $colors = array_slice($colors, 0, rand(1, count($colors)));
//    $board = $trello->boards('1xNAf1dj')->lists()->get();
// dpm($board);

//   $card = array(
//     'idList' => $list,
//     'name' => 'new api key',
//     'desc' => NULL,
//     'due' => NULL,
//     'labels' => NULL,
//     'idMembers' => NULL,
//   );
//   //dpm($trello->cards()->create($card));
  
//   $card_id = '520253a438a1ab8d64002f25';
//   dpm($trello->cards($card_id)->get());
//   $trello->cards($card_id)->labels()->update(implode(',', $colors));
  
//   $token = variable_get('trello_integration_token');
//   dpm($trello->tokens($token)->webhooks()->get());
  
 
  // webhooks live in tokens.  need a ->all for shortcuts?
  
//  $m = $trello->tokens('token_id')->member('member_id')->get();
  $board = variable_get('trello_integration_roadmap');
  if (!$board) {
    return;
  }
  list(,,,,$board_id) = explode('/', $board);
   
  $lists = $trello->boards($board_id)->lists()->get();
  return trello_integration_roadmap_page($lists);
  
  
//   foreach ($trello->boards($board_id)->lists()->get() as $list) {
//     if ($list->name == 'Inbox') {
//       dpm($list);
//       dpm($trello->lists($list->id)->cards()->get());
//     }  
    
//     $cards = $trello->lists($list->id)->cards()->get();
//   //  $cards = trello_integration_cards($list->id);
    
//     foreach ($cards as $card) {
//       if ($card->badges->comments) {
//         dpm($trello->cards($card->id)->actions()->comments()->get());
//       }
//     }
    
//     $lists[] = array(   
//       '#items' => array_map(create_function('$o', 'return $o->name;'), $cards),
//       '#title' => $list->name,
//       '#theme' => 'item_list',
//       '#type' => 'ul',
//       '#attributes' => array(), 
//     );
//   }

  
}


//wrapper for webhook.  creates a webhook to a specific service here.
function trello_integration_integrated_support_webhook($trello_id, $service, $service_id, $description = '') {
  //global $base_url;
  $base_url = 'http://140.247.184.89';
  $callback_url = "$base_url/trello_callback/$service/$service_id";
  $trello = trello_integration_client();
  
  return $trello->webhooks()->create(array(
    'idModel' => $trello_id,
    'callbackURL' => check_url(check_plain($callback_url)),
    'description' => $description,
  ));
}

function trello_integration_callback($service, $id) {
  $json = @file_get_contents('php://input');
  $payload = json_decode($json);
  $gh = github_integration_client();
  watchdog('trello', 'Trello recieved a webhook for "@id" on "@service": @hook', array('@id' => $id, '@service' => $service, '@hook' => $json));
  
  $trello = trello_integration_client();
  
  switch ($payload->action->type) {
    case 'moveCardFromBoard':
      //check that we're on intake and roadmap
      $source = $trello->boards($payload->action->board->id)->get();
      $dest = $trello->boards($payload->action->boardTarget->id)->get();
      if ($source->url == variable_get('trello_integration_intake') && $dest->url == variable_get('trello_integration_roadmap')) {
        
      }

      
      //maybe apply roadmap, user
      break;
      
    case 'addMemberToCard':
      break;
      
    case 'updateCard':
      if (!(isset($payload->action->data->listAfter) && $service == 'github')) {
        break; //updateCard is not unique to moves.
      }
      
      //check listBefore and listAfter to move between milestones
      $board = $trello->boards($payload->model->idBoard)->get();
      if ($board->url == variable_get('trello_integration_roadmap')) {
        
        //find out if this list is a milestone
        $milestones = array_reduce(github_integration_milestones(), function ($ret, $a) {
          $ret[$a['title']] = $a['number'];
          return $ret;
        });
        
        $milestone = $payload->action->data->listAfter->name;
        if (isset($milestones[$milestone])) {
          watchdog('trello', 'New milestone for @id: @ms', array('@id' => $id, '@ms' => $milestone));
          $gh->api('issue')->update(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $id, array('milestone' => $milestones[$milestone],));
        }
      }
      
      
      break;
  }
  
}

/**
 * @function trello_integration_ticket_sync()
 * 
 * Copies cards from getsatsifaction and github into trello
 */
function trello_integration_ticket_sync() {
  $imported = variable_get('trello_integration_cards_imported', array());
  $trello = trello_integration_client();
  $board = variable_get('trello_integration_intake');
  if (!$board) {
    return; //intake board is not enabled.  
  }
  list(,,,,$board_id) = explode('/', $board); 
  
  //Each list is generated from service matching array full of search criteria
  $imports = array(      
    'Features' => array('getsatisfaction' => array('style' => 'idea')),
    'Bugs' => array('getsatisfaction' => array('style' => 'problem')),
    'Engineering' => array('github' => array()),
  );

  foreach ($imports as $list_name => $import) {
    foreach ($import as $service => $params) {
      //get matching tickets
      $search = '_' . $service . '_integration_newer_issues';
      $last_id = (isset($imported[$list_name])) ? $imported[$list_name] : 0;
      $results = (function_exists($search)) ? $search($last_id, $params) : array();
      if (!$results) {
        continue;
      }
      $imported[$list_name] = max(array_keys($results));
      
      foreach ($results as $ticket) {
        //extract relevant info.  don't post duplicates.
        $card = _trello_integration_prepare_card($board_id, $service, $ticket, $list_name);
        if (($new = $trello->cards()->create($card)) != FALSE) {
          $wh = trello_integration_integrated_support_webhook($new->id, $service, $card['id']);
        }
      }
    }
  }
  
  //save the list of exported tickets
  variable_set('trello_integration_cards_imported', $imported);
}

/**
 * Implements hook_cron.
 */
function trello_integration_cron() {
  trello_integration_ticket_sync();
}

/**
 * @function _trello_integration_prepare_card()
 * 
 * Given a service and a ticket from that service, return an array of items to send to trello
 */
function _trello_integration_prepare_card($board_id, $service, $ticket, $list_name) {
  
  switch ($service) {
    case 'github':
      $return = array(
        'name' => $ticket['title'],
        'desc' => $ticket['html_url'] . "\n\n" . $ticket['body_html'],
        'id' => $ticket['number'],
      );
      break;
      
    case 'getsatisfaction':
      $return = array(
        'name' => $ticket->subject,
        'desc' => $ticket->at_sfn . "\n\n" . _trello_integration_html_to_markdown($ticket->content),
        'id' => $ticket->id,
      );
      break;
      
    default:
      return NULL;
  }
  
  $list = _trello_integration_get_lists($board_id, $list_name);
  $return['idList'] = $list->id;
  $return['labels'] = $list_name;
  
  return $return;
}

/**
 * @function _trello_integration_html_to_markdown()
 * 
 * Trello uses markdown.  GetSatisfaction uses html.  Convert html during ticket import.
 * Considered using a library, but GS uses such a small subset of HTML that this seemed easier.
 * 
 * @param string $html
 *   $html to convert
 * @param array $assets
 *   Assets to attach to the card will be added to this array.
 *   
 * Returns markdown
 */
function _trello_integration_html_to_markdown($html) {
  $regexes = array();
  
  //link
  $regexes['|<a.*?href=[\'"](.*?)[\'"].*?>(.*?)</a>|'] =  '[$2]($1)';
  
  //image
  $regexes['|<img.*?src=[\'"](.*?)[\'"].*?>|'] = '![img]($1)';
  
  //bold
  $regexes['|<strong>(.*?)</strong>|'] = '**$1**';
  $regexes['|<b>(.*?)</b>|'] = '**$1**';
  
  //newline
  $regexes['|<br>|'] = "\n";
  $regexes['|<br ?/>|'] = "\n";
  
  //italics
  $regexes['|<em>(.*?)</em>|'] = '*$1*';
  $regexes['|<i>(.*?)</i>|'] = '*$1*';
  
  //underline does not exist in markdown
  $regexes['|<u>(.*?)</u>|'] = '$1';
  
  //strikeout
  $regexes['|<s>(.*?)</s>|'] = '~~$1~~';
  $regexes['|<strike>(.*?)</strike>|'] = '~~$1~~';
  
  //paragraph
  $regexes['|<p>(.*?)</p>|'] = "\n\n" . '$1' . "\n\n";
  
  //lists (making them all ul for simplicity's sake)
  $regexes['|</?ul>|'] = '';
  $regexes['|</?ol>|'] = '';
  $regexes['|<li>(.*?)</li>|'] = '* $1';
  
  //code
  $regexes['|<code>(.*?)</code>|'] = '```$1```';
  
  //blockquote
  $regexes['|<blockquote>(.*?)</blockquote>|'] = '> $1';
  
  foreach ($regexes as $pattern => $replacement) {
    $html = preg_replace($pattern, $replacement, $html);
  }
  
  return $html;
}

/**
 * @function _trello_integration_get_lists
 * 
 * Gets trello list(s) by name
 */
function _trello_integration_get_lists($board_id, $name = NULL) {
  static $trello_lists;
  if (empty($trello_lists)) {
    $trello = trello_integration_client();
    $trello_lists = array();
    foreach ($trello->boards($board_id)->lists()->get() as $list) {
      $trello_lists[$list->name] = $list;
    }
  }
  
  return ($name) ? $trello_lists[$name] : $trello_lists;
}

/**
 * @function _trello_integration_github_state($issue)
 * 
 * Determines the state of a github issue
 */
function _trello_integration_github_state($issue) {
  if ($issue['state'] == 'closed') {
    return 'Closed';
  }
  
  //github labels -> roadmap labels mapping.  order matters, the later the label, the higher its precedence
  $label_status = variable_get('getsatisfaction_roadmap_status_labels', array(
    'status: pending' => 'Pending',
    'status: needs spec' => 'Design',
    'status: in dev' => 'Development',
    'status: needs review' => 'Review',
    'status: needs qa' => 'Testing',
    'status: fixed' => 'Done',
  ));
  //Get status from github label.  Order matters.
  foreach ($label_status as $label => $text) {
    if (in_array($label, $issue['labels'])) {
      $status = $text;
    }
  }
  
  return (isset($status)) ? $status : '';
}