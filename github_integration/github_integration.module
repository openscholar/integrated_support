<?php

/**
 * @function github_integration_menu()
 *
 * Implements hook_menu
 */
function github_integration_menu() {
	$items = array(
		'admin/config/integrated_support/github' => array(
			'title' => 'Github',
			'file' => '/github_integration.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('github_integration_admin'),
			'type' => MENU_LOCAL_TASK,
			'access arguments' => array('administer site configuration')
		),
    'alert' => array(
      'title' => 'Service Alerts',
      'page callback' => 'github_integration_alert_page',
      'access arguments' => array('access content'),
    ),
    'highscore' => array(
      'title' => 'Github High Scores',
      'page callback' => 'github_integration_highscore_page',
      'file' => '/github_integration.pages.inc',
      'access arguments' => array('access content'),
    ),
	);

	return $items;
}

/**
 * @function github_integration_integrated_support_info()
 *
 * Implements hook_integrated_support_info
 *
 * Defines github_issue event
 */
function github_integration_integrated_support_info() {
	return array(
		'github_issue' => array(
			'name' => t('Github Issue'),
			'description' => t('Github notifies Integrated Support when tickets are opened, closed, commented on, or pushed to.'),
			'process function' => 'github_integration_github_issue_process',
			'setup function' => 'github_integration_github_issue_setup',
		),
	);
}

/**
 * Implements hook_libraries_info
 *
 * Provides php-github-api
 */
function github_integration_libraries_info() {
	return array(
    'composer' => array(
      'name' => 'Composer Libs',
      'files' => array('php' => array('vendor/autoload.php')),
      'version' => 'master',
    ),
	);
}

/**
 * Implements hook_theme
 * 
 * Provides github_integration_theme_issue and github_integration_theme_issue_labels
 */
function github_integration_theme($existing, $type, $theme, $path) {
  return array(
    'github_integration_issue' => array(
      'variables' => array(
        'issue' => array(),
      ),
      'file' => 'github_integration.theme.inc',
      'render element' => 'element',
    ),
    'github_integration_issue_labels' => array(
      'variables' => array(
        'labels' => array(),
      ),
      'file' => 'github_integration.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * @function github_integration_integrated_support_status()
 *
 * Implements hook_integrated_support_status
 *
 * Connects to github and returns confirmation that a connection is possible.
 */
function github_integration_integrated_support_status() {
	$gh = github_integration_client();
github_integration_issue(5);
	try {
  	$me = $gh->api('current_user')->show();
	} catch (Exception $e) {
    drupal_set_message(t('Github error: @msg', array('@msg' => $e->getMessage())));
		$me = NULL;
	}
	
  return ($me) ? 'Logged into github as: ' . $me['login'] : 'Could not auth github';
}

/**
 * @function github_client()
 *
 * Returns object for poking github
 */
function github_integration_client($auth = TRUE) {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  //libraries_load('php-github-api');
  libraries_load('composer');
  $cache_dir = variable_get('github_cache_dir', '/tmp/github-api-cache');
  if (!is_dir($cache_dir)) {
    mkdir($cache_dir);
  }
  //$cache = new Github\HttpClient\CachedHttpClient(array('cache_dir' => __DIR__ . '/.github-api-cache'));
  $cache = new Github\HttpClient\CachedHttpClient(array('cache_dir' => $cache_dir));
  $gh_client = new Github\Client($cache);

  if ($auth) {
    try {
      $gh_client->authenticate(variable_get('github_auth_token'), $gh_client::AUTH_HTTP_TOKEN);
    } catch (Exception $e) {
      $gh_client = NULL;
    }
  }

  return $gh_client;
}

/**
 * @function github_integration_github_issue_process()
 *
 * Extracts the id, milestone, and state after validating that the request came from github
 */
function github_integration_github_issue_process($body) {
  $hash = hash_hmac('sha1', $body, variable_get('github_secret'));
//   if (!isset($_SERVER['HTTP_X_HUB_SIGNATURE']) || ('sha1='.$hash != $_SERVER['HTTP_X_HUB_SIGNATURE'])) {
//     watchdog('github', 'Error authenticating origin of github/hook_issue request', array(), WATCHDOG_ERROR);
//     return;
//   }

  $json = json_decode($body);
  watchdog('github', '@json', array('@json' => $body), WATCHDOG_DEBUG);

  if (isset($json->issue)) {
    //stash a local copy of this issue
    _github_intergation_update_issue_table($json->issue);

    //github issue evnet hook
    $return = array(
      'event' => 'issue',
  	  'id' => $json->issue->number,
      'milestone' => (isset($json->issue->milestone)) ? $json->issue->milestone->title : NULL,
      'state' => (in_array($json->action, array('closed', 'reopened'))) ? $json->action : $json->issue->state,
      'title' => $json->issue->title,
      'labels' => array_map(create_function('$a', 'return $a->name;'), $json->issue->labels),
      'type' => 'issue',
    );

    switch($json->action) {

      //instead of adding to array, can't we toggle comment or issue and fetch from there?  where else could this data appear?

      //pushed by an issue_comment
      case 'created':
        if (isset($json->comment)) {
          $return += array(
            'type' => 'comment',
          	'url' => $json->comment->html_url,
          	'user' => $json->comment->user->login, //user necessary?
          	'body' => $json->comment->body,
          );
        }
      break;

      //opened a new issue
      case 'opened':
        $return += array(
          'type' => 'issue',
          'url' => $json->issue->html_url,
          'user' => $json->issue->user->login,
          'body' => $json->issue->body,
        );
      break;
    }


  } elseif (isset($json->commits)) {
    //github push event
    $return = array(
      'event' => 'issue',
      'type' => 'push',
      'url' => $json->commits[0]->url,
      'id' => substr($json->commits[0]->id, 0, 8),
      'user' => $json->commits[0]->author->name, //committer or author?
      'body' => $json->commits[0]->message,
    );
  } else {
    //probably a PR
    $return = array(
      'event' => 'unknown github event',
      'type' => 'unknown',
      'payload' => $body,
    );
  }

  $prefix = ($return['type'] == 'issue') ? '#' : '';
  $return['link'] = (isset($return['url'])) ? "<a href='$return[url]'>${prefix}$return[id]</a>" : NULL;
  return $return;
}

/**
 * @function github_integration_integrated_support_event
 *
 * Implements hook_integrated_support_event
 *
 * Responds to a desk_integration event by creating a github issue
 */
function github_integration_integrated_support_event($event, $payload) {
	$return = array();
	switch ($event) {
		case 'desk_to_github':
			$return = github_create_issue(array(
				'title' => $payload['case_subject'],
		    'assignee' => integrated_support_map_username($payload['case_user_name'], 'desk_integration', 'github_integration'), //(isset($conf['user_map'][$data['case_user_name']])) ? $conf['user_map'][$data['case_user_name']] : NULL,
		    'labels' => 'desk',
		    'body' => $payload['link'] . "\n\n> " . $payload['case_body'],
			));

			break;
	}

	return $return;
}

/**
 * @function github_integration_github_issue_setup()
 *
 * Sets up github repository to send github_issue events here.
 */
function github_integration_github_issue_setup() {
  global $base_url;

  //creates new one
  $hook_conf = array(
    'name' => 'web',
    'config' => array(
      'url' => $base_url . '/integrated_support/github_issue', //should this be abstracted elsewhere?
      'content_type' => 'json',
      'secret' => variable_get('github_secret'),
    ),
    'events' => array('issues', 'issue_comment',), //can we add push?  will be needed if we do @changelog (or should that be any hash tag?)
  );

  _github_integration_github_api_setup($hook_conf);
}

/**
 * @function github_integration_github_push_process()
 *
 * Extracts the id, milestone, and state after validating that the request came from github
 */
// function github_integration_github_push_process($body) {
//   $hash = hash_hmac('sha1', $body, variable_get('github_secret'));
//   if (!isset($_SERVER['HTTP_X_HUB_SIGNATURE']) || ('sha1='.$hash != $_SERVER['HTTP_X_HUB_SIGNATURE'])) {
//     watchdog('github', 'Error authenticating origin of github/hook_issue request', array(), WATCHDOG_ERROR);
//     return;
//   }

//   $json = json_decode($body);
//   watchdog('github', '@json', array('@json' => $body), WATCHDOG_DEBUG);
//   $return = array(
//     'body' => $json->commits->message,
//     'link' => "<a href='$json->commits->url'>$json->commits->id</a>",
//     'user' => $json->commits->name,
//   );

//   return $return;
// }

/**
 * Define roadmap tables for views
 */
function github_integration_views_data() {

  $data['github_issues']['table']['group'] = t('GH');
  $data['github_issues']['table']['base'] = array(
    'field' => 'id', // This is the identifier field for the view.
    'title' => t('Github issues.'),
    'help' => t('Local storage of github issues.'),
    'weight' => -10,
  );

  $data['github_issues']['table']['join'] = array(
    'getsatisfaction_service_map' => array(
      'left_field' => 'external_id',
      'field' => 'id',
    ),
  );

  //ID table field.
  $data['github_issues']['id'] = array(
    'title' => t('ID'),
    'help' => t('Github ID.'),
    'relationship' => array(
      'base' => 'getsatisfaction_service_map', // The name of the table to join with.
      'base field' => 'id', // The name of the field on the joined table.
      // 'field' => 'nid' -- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('GH - Issuemap'),
      'title' => t('Relate to Github'),
      'help' => t('Relate to Github'),
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['github_issues']['title'] = array(
    'title' => t('Issue Title'),
    'help' => t('Github issue title.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE, // This is use by the table display plugin.
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['github_issues']['body'] = array(
    'title' => t('body'),
    'help' => t('Serialized list of labels applied to this ticket.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE, // This is use by the table display plugin.
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['github_issues']['updated'] = array(
    'title' => t('Updated'),
    'help' => t('Last time this ticket was updated.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
      'help' => t('Sort on a update date.'),
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
      'help' => t('Filter on update field.'),
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_date',
      'numeric' => TRUE,
      'help' => t('Argument on a Issue\'s date field.'),
    ),
  );

  $data['getsatisfaction_topics']['milestone'] = array(
    'title' => t('milestone'),
    'help' => t('Github Milestone.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE, // This is use by the table display plugin.
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  return $data;
}


/**
 * @function _github_integration_github_api_setup
 *
 * Given a github service hook, deletes old instances of hook and adds this one.
 */
function _github_integration_github_api_setup($github_hook) {
  $gh = github_integration_client();
  $user = variable_get('github_repo_owner');
  $repo = variable_get('github_repo_repository');

  $hooks = $gh->api('repo')->hooks()->all($user, $repo);

  //delete old instance of this hook.
  if (isset($hooks['id'])) {
    $hooks = array($hooks);
  }

  foreach ($hooks as $hook) {
    if (isset($hook['name']) && ($hook['name'] == $github_hook['name']) && ($hook['config']['url'] == $github_hook['config']['url'])) {
      $gh->api('repo')->hooks()->remove($user, $repo, $hook['id']);
    }
  }

  $new = $gh->api('repo')->hooks()->create($user, $repo, $github_hook);
  drupal_set_message('Updated Github service hook. ' . serialize($new));
}

/**
 * @function github_create_issue
 *
 * Takes an assoc array and sends it to github.  Input field names here:
 * http://developer.github.com/v3/issues/#create-an-issue
 */
function github_create_issue($issue) {
  if (!isset($issue['title'])) {
    watchdog('github','Can\'t create a github issue with no title.');
    return False;
  }

  $gh = github_integration_client();
  try {
    $issue = $gh->api('issue')->create(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $issue);
  } catch (Exception $e) {
    watchdog('github', '@code error creating issue "@issue": @msg', array('@issue' => serialize($issue), '@code' => $e->getCode(), '@msg' => $e->getMessage()));
    return FALSE;
  }
  _github_intergation_update_issue_table($issue);
  return $issue;
}

function github_template_body($opts = array()) {
}

/**
 * @function github_integration_alert_page
 *
 * Shows high alert issues from GH.
 */
function github_integration_alert_page() {
  $items = array();
  $client = github_integration_client(FALSE);
  $labels = array_filter(variable_get('github_alert_labels', array()));
  if (!$labels) {
    return 'Alerts disabled.';
  }

  //Get open issues
  try {
    $issues = $client->api('issue')->all(variable_get('github_repo_owner'), variable_get('github_repo_repository'), array(
      'labels' => implode(',', $labels),
    ));
  
    //Get recently closed issues
    if (variable_get('github_integration_alert_show_closed', TRUE)) {
      $closed = $client->api('issue')->all(variable_get('github_repo_owner'), variable_get('github_repo_repository'), array(
        'labels' => implode(',', $labels),
        'state' => 'closed',
        'sort' => 'updated',
        'since' => date(DATE_ISO8601, time() - 60*60*24*7*2), //show all closures within two weeks  
      ));
      
      $issues = array_merge($issues, $closed);
    }
  } catch (Exception $e) {
    watchdog('github', '@code error connecting to github.  @msg', array('@code' => $e->getCode(), '@msg' => $e->getMessage()));
    return t('Could not connect to github.  Status alerts temporarily unavailable.');
  }

  foreach ($issues as $issue) {
    $issue['labels'] = _github_integration_filter_labels($issue['labels']);
    $items[] = theme('github_integration_issue', array('issue' => $issue));
  }
  
  if ($items) {
    return array(
      '#prefix' => '<div class="alerts">',
      '#suffix' => '</div>',
      'description' => array(
        '#type' => 'markup',
        '#markup' => '<h2 class="roadmap">Hotfixes</h2><p>The following issues are considered time sensitive and will be released as soon as possible, outside the normally scheduled release cycle.</p>',
      ),
      'alerts' => array(
        '#theme' => 'item_list',
        '#items' => $items,
        '#type' => 'ul',
        '#attributes' => array('class' => array('alert-issues'))
      ),
    );
  } else {
    return t('No reported service alerts.');
  }
}



/**
 * @function _github_integration_github_issue
 *
 * Fetch a github issue by id.
 */
function github_integration_issue($id) {
  $gh = github_integration_client(); //authed req is better.  100x the rate limit.  when it works again, remove this false
  try {
    $issue = $gh->api('issue')->show(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $id);
  } catch (Exception $e) {
    watchdog('github', 'Couldn\'t fetch github ticket "@id".  Error: @error.  Message: @msg', array('@id' => $id, '@error' => $e->getCode(), '@msg' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }

  //stash a copy of this issue
  _github_intergation_update_issue_table($issue);

  //and back to the user
  return (!$issue) ? FALSE : array(
    'labels' =>     array_map(create_function('$a', 'return $a["name"];'),$issue['labels']),
    'state' =>      $issue['state'],
    'milestone' =>  $issue['milestone']['title'],
    'title' =>      $issue['title'],
    'id' =>         $issue['number'],
    'user' =>       (isset($issue['user'])) ? $issue['user']['login'] : NULL,
    'updated_at' => $issue['updated_at'],
    'html_url' =>   $issue['html_url'],
  );
}


/**
 * @function github_integration_issues
 * 
 * Searches github for issues matching a variety of criteria
 */
function github_integration_issues($parameters) {
  $cache_key = 'github_integration_issues::' . http_build_query($parameters);
  $cached = cache_get($cache_key);
  if ($cached && $cached->expire > time()) {
    return $cached->data;
  }
  
  
  $client = github_integration_client();
  $page = 1;
  $parameters['per_page'] = (isset($parameters['per_page'])) ? $parameters['per_page'] : 30;
  $ret = array();
   
  while ($page) {
    $parameters['page'] = $page;
  
    try {
      $issues = $client->api('issue')->all(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $parameters);
    } catch (Exception $e) {
      watchdog('github', 'Could not load issues matching params: @params', array('@params' => serialize($parameters)));
      return FALSE;
    }

    $page = (count($issues) == $parameters['per_page']) ? $page + 1 : FALSE;
    $ret = array_merge($ret, $issues);
  }
  
  cache_set($cache_key, $ret, 'cache', 60*60*24);
  return $ret;
}
/**
 * @function github_integration_milestones
 *
 * Returns a list of GH milestones and their ids.
 */
function github_integration_milestones($query = array()) {
  asort($query);
  $key = 'github_milestones::' . http_build_query($query);
  $cache = cache_get($key);
  if ($cache && (time() < $cache->expire)) {
    return $cache->data;
  }
  
  try {
    $gh = github_integration_client();
    $milestones = $gh->api('issue')->milestones()->all(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $query);
  } catch (Exception $e) {
    watchdog('github', 'Could not fetch github milestones: @code', array('@code' => $e->getCode()), WATCHDOG_ERROR);
    drupal_set_message('There was an error connecting to github.  Please try again in a few minutes.', 'error');
    return NULL; 
  }
  
  cache_set($key, $milestones, 'cache', time() + 3600);
  return $milestones;
}

/**
 * @function _github_integration_filter_labels
 * 
 * Removes labels that aren't whitelisted to show up.
 */
function _github_integration_filter_labels($labels) {
  $whitelist = explode(',', variable_get('github_integration_label_whitelist', ''));
  foreach ($labels as $key => $label) {
    if (!in_array($label['name'], $whitelist)) {
      unset($labels[$key]);
    }
  }
  return $labels;
}

/**
 * @function _github_intergation_update_issue_table
 *
 * Stores a github issue locally so views can see it.
 */
function _github_intergation_update_issue_table($issue) {
  if (is_object($issue)) {
    $issue = (array) $issue;
    foreach (array('assignee', 'user', 'milestone') as $item) {
      $issue[$item] = (array) $issue[$item];
    }
  }
  
  //add to local storage.
  $record = array(
    'id' =>         $issue['number'],
    'title' =>      $issue['title'],
    'labels' =>     serialize($issue['labels']),
    'comments' =>   $issue['comments'],
    'state' =>      $issue['state'],
    'body' =>       $issue['body'],
    'closed' =>     ($issue['closed_at']) ? strtotime($issue['closed_at']) : NULL,
    'created' =>    ($issue['created_at']) ? strtotime($issue['created_at']) : NULL,
    'updated' =>    ($issue['updated_at']) ? strtotime($issue['updated_at']) : NULL,
    'assignee' =>   ($issue['assignee']) ? $issue['assignee']['login'] : NULL,
    'owner' =>      ($issue['user']) ? $issue['user']['login'] : NULL,
    'link' =>       $issue['html_url'],
    'milestone' =>  ($issue['milestone']) ? $issue['milestone']['title'] : NULL,
  );

  $stored = db_select('github_issues', 'gh')
    ->condition('id', $issue['number'])
    ->fields('gh')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  //create or update record
  if (!$stored) {
    drupal_write_record('github_issues', $record);
  } elseif ($stored['updated'] != $issue['updated_at']) {
    db_update('github_issues')
    ->fields($record)
    ->condition('id', $issue['number'])
    ->execute();
  }
}

