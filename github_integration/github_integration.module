<?php 

/**
 * @function github_integration_menu()
 * 
 * Implements hook_menu
 */
function github_integration_menu() {
	$items = array(
		'admin/config/integrated_support/github' => array(
			'title' => 'Github',
			'file' => '/github_integration.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('github_integration_admin'),
			'type' => MENU_LOCAL_TASK,
			'access arguments' => array('administer site configuration')
		),
    'alert' => array(
      'title' => 'Service Alerts',
      'page callback' => 'github_integration_alert_page',
      'access arguments' => array('access content'),
    )
	);
	
	return $items;
}

/**
 * @function github_integration_integrated_support_info()
 * 
 * Implements hook_integrated_support_info
 * 
 * Defines github_issue event
 */
function github_integration_integrated_support_info() {
	return array(
		'github_issue' => array(
			'name' => t('Github Issue'),
			'description' => t('Github notifies Integrated Support when tickets are opened, closed, commented on, or pushed to.'),
			'process function' => 'github_integration_github_issue_process',
			'setup function' => 'github_integration_github_issue_setup',
		),
	);
}

/**
 * Implements hook_libraries_info
 * 
 * Provides php-github-api
 */
function github_integration_libraries_info() {
	return array(
    'composer' => array(
      'name' => 'Composer Libs',
      'files' => array('php' => array('vendor/autoload.php')),
      'version' => 'master',
    ),
	);
}

/**
 * @function github_integration_integrated_support_status() 
 * 
 * Implements hook_integrated_support_status
 * 
 * Connects to github and returns confirmation that a connection is possible.
 */
function github_integration_integrated_support_status() {
	$gh = github_integration_client();

	try {
  	$me = $gh->api('current_user')->show();
	} catch (Exception $e) {
    drupal_set_message(t('Github error: @msg', array('@msg' => $e->getMessage())));
		$me = NULL;
	}
  return ($me) ? 'Logged into github as: ' . $me['login'] : 'Could not auth github';	
}

/**
 * @function github_client()
 * 
 * Returns object for poking github
 */
function github_integration_client($auth = TRUE) {
  static $gh_client;
  if (!empty($gh_client)) {
    return $gh_client;
  }

  //libraries_load('php-github-api');
  libraries_load('composer');
  $cache_dir = variable_get('github_cache_dir', '/tmp/github-api-cache');
  if (!is_dir($cache_dir)) {
    mkdir($cache_dir);
  }
  //$cache = new Github\HttpClient\CachedHttpClient(array('cache_dir' => __DIR__ . '/.github-api-cache'));
  $cache = new Github\HttpClient\CachedHttpClient(array('cache_dir' => $cache_dir));
  $gh_client = new Github\Client($cache);
	
  if ($auth) {
    try {
      $gh_client->authenticate(variable_get('github_auth_token'), $gh_client::AUTH_HTTP_TOKEN);
    } catch (Exception $e) {
      $gh_client = NULL;
    }   
  }

  return $gh_client;
}

/**
 * @function github_integration_github_issue_process()
 * 
 * Extracts the id, milestone, and state after validating that the request came from github
 */
function github_integration_github_issue_process($body) {
  $hash = hash_hmac('sha1', $body, variable_get('github_secret'));
//   if (!isset($_SERVER['HTTP_X_HUB_SIGNATURE']) || ('sha1='.$hash != $_SERVER['HTTP_X_HUB_SIGNATURE'])) {
//     watchdog('github', 'Error authenticating origin of github/hook_issue request', array(), WATCHDOG_ERROR);
//     return;
//   }

  $json = json_decode($body);
  watchdog('github', '@json', array('@json' => $body), WATCHDOG_DEBUG);
  
  if (isset($json->issue)) {
    //github issue evnet hook
    $return = array(
      'event' => 'issue',
  	  'id' => $json->issue->number,
      'milestone' => (isset($json->issue->milestone)) ? $json->issue->milestone->title : NULL,
      'state' => (in_array($json->action, array('closed', 'reopened'))) ? $json->action : $json->issue->state,
      'title' => $json->issue->title,
      'labels' => array_map(create_function('$a', 'return $a->name;'), $json->issue->labels),
      'type' => 'issue',
    );
    
    switch($json->action) {
      
      //instead of adding to array, can't we toggle comment or issue and fetch from there?  where else could this data appear?
      
      //pushed by an issue_comment
      case 'created':
        if (isset($json->comment)) {
          $return += array(
            'type' => 'comment',
          	'url' => $json->comment->html_url,
          	'user' => $json->comment->user->login, //user necessary?
          	'body' => $json->comment->body,
          );
        }
      break;
  
      //opened a new issue
      case 'opened': 
        $return += array(
          'type' => 'issue',
          'url' => $json->issue->html_url,
          'user' => $json->issue->user->login,
          'body' => $json->issue->body,
        );
      break;
    }
  
    
  } elseif (isset($json->commits)) {
    //github push event
    $return = array(
      'event' => 'issue',
      'type' => 'push',
      'url' => $json->commits[0]->url,
      'id' => substr($json->commits[0]->id, 0, 8),
      'user' => $json->commits[0]->author->name, //committer or author?
      'body' => $json->commits[0]->message,
    );
  } else {
    //probably a PR
    $return = array(
      'event' => 'unknown github event',
      'type' => 'unknown',
      'payload' => $body,  
    );
  }
  
  $prefix = ($return['type'] == 'issue') ? '#' : '';
  $return['link'] = (isset($return['url'])) ? "<a href='$return[url]'>${prefix}$return[id]</a>" : NULL; 
  return $return;
}

/**
 * @function github_integration_integrated_support_event
 * 
 * Implements hook_integrated_support_event
 * 
 * Responds to a desk_integration event by creating a github issue
 */
function github_integration_integrated_support_event($event, $payload) {
	$return = array();
	switch ($event) {
		case 'desk_to_github':
			$return = github_create_issue(array(
				'title' => $payload['case_subject'],
		    'assignee' => integrated_support_map_username($payload['case_user_name'], 'desk_integration', 'github_integration'), //(isset($conf['user_map'][$data['case_user_name']])) ? $conf['user_map'][$data['case_user_name']] : NULL,
		    'labels' => 'desk',
		    'body' => $payload['case_body'],//theme('github_issue_body', $payload), //or should this map a payload?
			));
			
			break;
	}
	
	return $return;
}

/**
 * @function github_integration_github_issue_setup()
 * 
 * Sets up github repository to send github_issue events here.
 */
function github_integration_github_issue_setup() {
  global $base_url; 

  //creates new one
  $hook_conf = array(
    'name' => 'web',
    'config' => array(
      'url' => $base_url . '/integrated_support/github_issue', //should this be abstracted elsewhere?
      'content_type' => 'json',
      'secret' => variable_get('github_secret'),
    ),
    'events' => array('issues', 'issue_comment',), //can we add push?  will be needed if we do @changelog (or should that be any hash tag?)
  );
  
  _github_integration_github_api_setup($hook_conf);
}

/**
 * @function github_integration_github_push_process()
 *
 * Extracts the id, milestone, and state after validating that the request came from github
 */
// function github_integration_github_push_process($body) {
//   $hash = hash_hmac('sha1', $body, variable_get('github_secret'));
//   if (!isset($_SERVER['HTTP_X_HUB_SIGNATURE']) || ('sha1='.$hash != $_SERVER['HTTP_X_HUB_SIGNATURE'])) {
//     watchdog('github', 'Error authenticating origin of github/hook_issue request', array(), WATCHDOG_ERROR);
//     return;
//   }

//   $json = json_decode($body);
//   watchdog('github', '@json', array('@json' => $body), WATCHDOG_DEBUG);
//   $return = array(
//     'body' => $json->commits->message,
//     'link' => "<a href='$json->commits->url'>$json->commits->id</a>",  
//     'user' => $json->commits->name,
//   );
  
//   return $return;
// }


/**
 * @function _github_integration_github_api_setup
 * 
 * Given a github service hook, deletes old instances of hook and adds this one.
 */
function _github_integration_github_api_setup($github_hook) {
  $gh = github_integration_client();
  $user = variable_get('github_repo_owner');
  $repo = variable_get('github_repo_repository');
  
  $hooks = $gh->api('repo')->hooks()->all($user, $repo);
  
  //delete old instance of this hook.
  if (isset($hooks['id'])) {
    $hooks = array($hooks);
  }

  foreach ($hooks as $hook) {
    if (isset($hook['name']) && ($hook['name'] == $github_hook['name']) && ($hook['config']['url'] == $github_hook['config']['url'])) {
      $gh->api('repo')->hooks()->remove($user, $repo, $hook['id']);
    }
  }

  $new = $gh->api('repo')->hooks()->create($user, $repo, $github_hook);
  drupal_set_message('Updated Github service hook. ' . serialize($new));
}

/**
 * @function github_create_issue
 * 
 * Takes an assoc array and sends it to github.  Input field names here:
 * http://developer.github.com/v3/issues/#create-an-issue
 */
function github_create_issue($issue) {
  if (!isset($issue['title'])) {
    watchdog('github','Can\'t create a github issue with no title.');
    return False;
  }
  
  $gh = github_integration_client();
  return $gh->api('issue')->create(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $issue);
}

function github_template_body($opts = array()) {
}

/**
 * @function github_integration_alert_page
 *
 * Shows high alert issues from GH.
 */
function github_integration_alert_page() {
  $items = array();
  $client = github_integration_client(FALSE);
  $labels = array_filter(variable_get('github_alert_labels', array()));
  if (!$labels) {
    return 'Alerts disabled';
  }

  $issues = $client->api('issue')->all(variable_get('github_repo_owner'), variable_get('github_repo_repository'), array(
    'labels' => implode(',', $labels),
  ));


  $show_labels = array('status: needs qa');
  drupal_add_css(drupal_get_path('module', 'github_integration') . '/github_integration_labels.css');
  foreach ($issues as $issue) {
    $label_text = '';
    foreach ($issue['labels'] as $label) {
      //determine brightness so we can use black or white text.
      $color = $label['color'];
      $lightness = 0;
      foreach (array($color[0], $color[2], $color[4]) as $c) {
        if (!(is_numeric($c) && $c<8)) {
          $lightness++;
        }
      }
      $textcolor = ($lightness > 1) ? 'black' : 'white';
      $label_text .= ' <span class="github-label" style="color: '.$textcolor.'; background-color:#'.$color.'">' . $label['name'] . '</span>';
    }

    $ago = format_interval(time() - strtotime($issue['created_at']), 1);
    $items[] = l($issue['title'], $issue['html_url']) . "<p>Reported $ago ago. $label_text</p>";
  }

  if ($items) {
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('alert-issues'))));
  } else {
    return t('No reported service alerts.');
  }
}



/**
 * @function _github_integration_github_issue
 *
 * Fetch a github issue by id.
 */
function github_integration_issue($id) {
  //why no cache?  github lib does it for us.
  $gh = github_integration_client(); //authed req is better.  100x the rate limit.  when it works again, remove this false
  $issue = $gh->api('issue')->show(variable_get('github_repo_owner'), variable_get('github_repo_repository'), $id);

  return (!$issue) ? FALSE : array(
    'labels' =>     array_map(create_function('$a', 'return $a["name"];'),$issue['labels']),
    'state' =>      $issue['state'],
    'milestone' =>  $issue['milestone']['title'],
    'title' =>      $issue['title'],
    'id' =>         $issue['number'],
  );
}
